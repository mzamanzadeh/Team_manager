// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_visualizer.proto

public final class SslVisualizer {
  private SslVisualizer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ssl_visualizer_packetOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .ssl_world_packet world_data = 1;
    boolean hasWorldData();
    SslWorld.ssl_world_packet getWorldData();
    SslWorld.ssl_world_packetOrBuilder getWorldDataOrBuilder();
    
    // optional .ssl_analyzer_packet analyzer_data = 2;
    boolean hasAnalyzerData();
    SslAnalyzer.ssl_analyzer_packet getAnalyzerData();
    SslAnalyzer.ssl_analyzer_packetOrBuilder getAnalyzerDataOrBuilder();
    
    // optional .ssl_decision_packet decision_data = 3;
    boolean hasDecisionData();
    SslDecision.ssl_decision_packet getDecisionData();
    SslDecision.ssl_decision_packetOrBuilder getDecisionDataOrBuilder();
    
    // optional .ssl_planner_packet planner_data = 4;
    boolean hasPlannerData();
    SslPlanner.ssl_planner_packet getPlannerData();
    SslPlanner.ssl_planner_packetOrBuilder getPlannerDataOrBuilder();
  }
  public static final class ssl_visualizer_packet extends
      com.google.protobuf.GeneratedMessage
      implements ssl_visualizer_packetOrBuilder {
    // Use ssl_visualizer_packet.newBuilder() to construct.
    private ssl_visualizer_packet(Builder builder) {
      super(builder);
    }
    private ssl_visualizer_packet(boolean noInit) {}
    
    private static final ssl_visualizer_packet defaultInstance;
    public static ssl_visualizer_packet getDefaultInstance() {
      return defaultInstance;
    }
    
    public ssl_visualizer_packet getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslVisualizer.internal_static_ssl_visualizer_packet_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslVisualizer.internal_static_ssl_visualizer_packet_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .ssl_world_packet world_data = 1;
    public static final int WORLD_DATA_FIELD_NUMBER = 1;
    private SslWorld.ssl_world_packet worldData_;
    public boolean hasWorldData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public SslWorld.ssl_world_packet getWorldData() {
      return worldData_;
    }
    public SslWorld.ssl_world_packetOrBuilder getWorldDataOrBuilder() {
      return worldData_;
    }
    
    // optional .ssl_analyzer_packet analyzer_data = 2;
    public static final int ANALYZER_DATA_FIELD_NUMBER = 2;
    private SslAnalyzer.ssl_analyzer_packet analyzerData_;
    public boolean hasAnalyzerData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public SslAnalyzer.ssl_analyzer_packet getAnalyzerData() {
      return analyzerData_;
    }
    public SslAnalyzer.ssl_analyzer_packetOrBuilder getAnalyzerDataOrBuilder() {
      return analyzerData_;
    }
    
    // optional .ssl_decision_packet decision_data = 3;
    public static final int DECISION_DATA_FIELD_NUMBER = 3;
    private SslDecision.ssl_decision_packet decisionData_;
    public boolean hasDecisionData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public SslDecision.ssl_decision_packet getDecisionData() {
      return decisionData_;
    }
    public SslDecision.ssl_decision_packetOrBuilder getDecisionDataOrBuilder() {
      return decisionData_;
    }
    
    // optional .ssl_planner_packet planner_data = 4;
    public static final int PLANNER_DATA_FIELD_NUMBER = 4;
    private SslPlanner.ssl_planner_packet plannerData_;
    public boolean hasPlannerData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public SslPlanner.ssl_planner_packet getPlannerData() {
      return plannerData_;
    }
    public SslPlanner.ssl_planner_packetOrBuilder getPlannerDataOrBuilder() {
      return plannerData_;
    }
    
    private void initFields() {
      worldData_ = SslWorld.ssl_world_packet.getDefaultInstance();
      analyzerData_ = SslAnalyzer.ssl_analyzer_packet.getDefaultInstance();
      decisionData_ = SslDecision.ssl_decision_packet.getDefaultInstance();
      plannerData_ = SslPlanner.ssl_planner_packet.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasWorldData()) {
        if (!getWorldData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAnalyzerData()) {
        if (!getAnalyzerData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDecisionData()) {
        if (!getDecisionData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPlannerData()) {
        if (!getPlannerData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, worldData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, analyzerData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, decisionData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, plannerData_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, worldData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, analyzerData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, decisionData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, plannerData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslVisualizer.ssl_visualizer_packet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslVisualizer.ssl_visualizer_packet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslVisualizer.ssl_visualizer_packet prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslVisualizer.ssl_visualizer_packetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslVisualizer.internal_static_ssl_visualizer_packet_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslVisualizer.internal_static_ssl_visualizer_packet_fieldAccessorTable;
      }
      
      // Construct using SslVisualizer.ssl_visualizer_packet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWorldDataFieldBuilder();
          getAnalyzerDataFieldBuilder();
          getDecisionDataFieldBuilder();
          getPlannerDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (worldDataBuilder_ == null) {
          worldData_ = SslWorld.ssl_world_packet.getDefaultInstance();
        } else {
          worldDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (analyzerDataBuilder_ == null) {
          analyzerData_ = SslAnalyzer.ssl_analyzer_packet.getDefaultInstance();
        } else {
          analyzerDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (decisionDataBuilder_ == null) {
          decisionData_ = SslDecision.ssl_decision_packet.getDefaultInstance();
        } else {
          decisionDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (plannerDataBuilder_ == null) {
          plannerData_ = SslPlanner.ssl_planner_packet.getDefaultInstance();
        } else {
          plannerDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslVisualizer.ssl_visualizer_packet.getDescriptor();
      }
      
      public SslVisualizer.ssl_visualizer_packet getDefaultInstanceForType() {
        return SslVisualizer.ssl_visualizer_packet.getDefaultInstance();
      }
      
      public SslVisualizer.ssl_visualizer_packet build() {
        SslVisualizer.ssl_visualizer_packet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslVisualizer.ssl_visualizer_packet buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslVisualizer.ssl_visualizer_packet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslVisualizer.ssl_visualizer_packet buildPartial() {
        SslVisualizer.ssl_visualizer_packet result = new SslVisualizer.ssl_visualizer_packet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (worldDataBuilder_ == null) {
          result.worldData_ = worldData_;
        } else {
          result.worldData_ = worldDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (analyzerDataBuilder_ == null) {
          result.analyzerData_ = analyzerData_;
        } else {
          result.analyzerData_ = analyzerDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (decisionDataBuilder_ == null) {
          result.decisionData_ = decisionData_;
        } else {
          result.decisionData_ = decisionDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (plannerDataBuilder_ == null) {
          result.plannerData_ = plannerData_;
        } else {
          result.plannerData_ = plannerDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslVisualizer.ssl_visualizer_packet) {
          return mergeFrom((SslVisualizer.ssl_visualizer_packet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslVisualizer.ssl_visualizer_packet other) {
        if (other == SslVisualizer.ssl_visualizer_packet.getDefaultInstance()) return this;
        if (other.hasWorldData()) {
          mergeWorldData(other.getWorldData());
        }
        if (other.hasAnalyzerData()) {
          mergeAnalyzerData(other.getAnalyzerData());
        }
        if (other.hasDecisionData()) {
          mergeDecisionData(other.getDecisionData());
        }
        if (other.hasPlannerData()) {
          mergePlannerData(other.getPlannerData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasWorldData()) {
          if (!getWorldData().isInitialized()) {
            
            return false;
          }
        }
        if (hasAnalyzerData()) {
          if (!getAnalyzerData().isInitialized()) {
            
            return false;
          }
        }
        if (hasDecisionData()) {
          if (!getDecisionData().isInitialized()) {
            
            return false;
          }
        }
        if (hasPlannerData()) {
          if (!getPlannerData().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              SslWorld.ssl_world_packet.Builder subBuilder = SslWorld.ssl_world_packet.newBuilder();
              if (hasWorldData()) {
                subBuilder.mergeFrom(getWorldData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setWorldData(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SslAnalyzer.ssl_analyzer_packet.Builder subBuilder = SslAnalyzer.ssl_analyzer_packet.newBuilder();
              if (hasAnalyzerData()) {
                subBuilder.mergeFrom(getAnalyzerData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAnalyzerData(subBuilder.buildPartial());
              break;
            }
            case 26: {
              SslDecision.ssl_decision_packet.Builder subBuilder = SslDecision.ssl_decision_packet.newBuilder();
              if (hasDecisionData()) {
                subBuilder.mergeFrom(getDecisionData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDecisionData(subBuilder.buildPartial());
              break;
            }
            case 34: {
              SslPlanner.ssl_planner_packet.Builder subBuilder = SslPlanner.ssl_planner_packet.newBuilder();
              if (hasPlannerData()) {
                subBuilder.mergeFrom(getPlannerData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPlannerData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .ssl_world_packet world_data = 1;
      private SslWorld.ssl_world_packet worldData_ = SslWorld.ssl_world_packet.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslWorld.ssl_world_packet, SslWorld.ssl_world_packet.Builder, SslWorld.ssl_world_packetOrBuilder> worldDataBuilder_;
      public boolean hasWorldData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public SslWorld.ssl_world_packet getWorldData() {
        if (worldDataBuilder_ == null) {
          return worldData_;
        } else {
          return worldDataBuilder_.getMessage();
        }
      }
      public Builder setWorldData(SslWorld.ssl_world_packet value) {
        if (worldDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          worldData_ = value;
          onChanged();
        } else {
          worldDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setWorldData(
          SslWorld.ssl_world_packet.Builder builderForValue) {
        if (worldDataBuilder_ == null) {
          worldData_ = builderForValue.build();
          onChanged();
        } else {
          worldDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeWorldData(SslWorld.ssl_world_packet value) {
        if (worldDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              worldData_ != SslWorld.ssl_world_packet.getDefaultInstance()) {
            worldData_ =
              SslWorld.ssl_world_packet.newBuilder(worldData_).mergeFrom(value).buildPartial();
          } else {
            worldData_ = value;
          }
          onChanged();
        } else {
          worldDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearWorldData() {
        if (worldDataBuilder_ == null) {
          worldData_ = SslWorld.ssl_world_packet.getDefaultInstance();
          onChanged();
        } else {
          worldDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public SslWorld.ssl_world_packet.Builder getWorldDataBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getWorldDataFieldBuilder().getBuilder();
      }
      public SslWorld.ssl_world_packetOrBuilder getWorldDataOrBuilder() {
        if (worldDataBuilder_ != null) {
          return worldDataBuilder_.getMessageOrBuilder();
        } else {
          return worldData_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslWorld.ssl_world_packet, SslWorld.ssl_world_packet.Builder, SslWorld.ssl_world_packetOrBuilder> 
          getWorldDataFieldBuilder() {
        if (worldDataBuilder_ == null) {
          worldDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslWorld.ssl_world_packet, SslWorld.ssl_world_packet.Builder, SslWorld.ssl_world_packetOrBuilder>(
                  worldData_,
                  getParentForChildren(),
                  isClean());
          worldData_ = null;
        }
        return worldDataBuilder_;
      }
      
      // optional .ssl_analyzer_packet analyzer_data = 2;
      private SslAnalyzer.ssl_analyzer_packet analyzerData_ = SslAnalyzer.ssl_analyzer_packet.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslAnalyzer.ssl_analyzer_packet, SslAnalyzer.ssl_analyzer_packet.Builder, SslAnalyzer.ssl_analyzer_packetOrBuilder> analyzerDataBuilder_;
      public boolean hasAnalyzerData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public SslAnalyzer.ssl_analyzer_packet getAnalyzerData() {
        if (analyzerDataBuilder_ == null) {
          return analyzerData_;
        } else {
          return analyzerDataBuilder_.getMessage();
        }
      }
      public Builder setAnalyzerData(SslAnalyzer.ssl_analyzer_packet value) {
        if (analyzerDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          analyzerData_ = value;
          onChanged();
        } else {
          analyzerDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setAnalyzerData(
          SslAnalyzer.ssl_analyzer_packet.Builder builderForValue) {
        if (analyzerDataBuilder_ == null) {
          analyzerData_ = builderForValue.build();
          onChanged();
        } else {
          analyzerDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeAnalyzerData(SslAnalyzer.ssl_analyzer_packet value) {
        if (analyzerDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              analyzerData_ != SslAnalyzer.ssl_analyzer_packet.getDefaultInstance()) {
            analyzerData_ =
              SslAnalyzer.ssl_analyzer_packet.newBuilder(analyzerData_).mergeFrom(value).buildPartial();
          } else {
            analyzerData_ = value;
          }
          onChanged();
        } else {
          analyzerDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearAnalyzerData() {
        if (analyzerDataBuilder_ == null) {
          analyzerData_ = SslAnalyzer.ssl_analyzer_packet.getDefaultInstance();
          onChanged();
        } else {
          analyzerDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public SslAnalyzer.ssl_analyzer_packet.Builder getAnalyzerDataBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getAnalyzerDataFieldBuilder().getBuilder();
      }
      public SslAnalyzer.ssl_analyzer_packetOrBuilder getAnalyzerDataOrBuilder() {
        if (analyzerDataBuilder_ != null) {
          return analyzerDataBuilder_.getMessageOrBuilder();
        } else {
          return analyzerData_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslAnalyzer.ssl_analyzer_packet, SslAnalyzer.ssl_analyzer_packet.Builder, SslAnalyzer.ssl_analyzer_packetOrBuilder> 
          getAnalyzerDataFieldBuilder() {
        if (analyzerDataBuilder_ == null) {
          analyzerDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslAnalyzer.ssl_analyzer_packet, SslAnalyzer.ssl_analyzer_packet.Builder, SslAnalyzer.ssl_analyzer_packetOrBuilder>(
                  analyzerData_,
                  getParentForChildren(),
                  isClean());
          analyzerData_ = null;
        }
        return analyzerDataBuilder_;
      }
      
      // optional .ssl_decision_packet decision_data = 3;
      private SslDecision.ssl_decision_packet decisionData_ = SslDecision.ssl_decision_packet.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslDecision.ssl_decision_packet, SslDecision.ssl_decision_packet.Builder, SslDecision.ssl_decision_packetOrBuilder> decisionDataBuilder_;
      public boolean hasDecisionData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public SslDecision.ssl_decision_packet getDecisionData() {
        if (decisionDataBuilder_ == null) {
          return decisionData_;
        } else {
          return decisionDataBuilder_.getMessage();
        }
      }
      public Builder setDecisionData(SslDecision.ssl_decision_packet value) {
        if (decisionDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          decisionData_ = value;
          onChanged();
        } else {
          decisionDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setDecisionData(
          SslDecision.ssl_decision_packet.Builder builderForValue) {
        if (decisionDataBuilder_ == null) {
          decisionData_ = builderForValue.build();
          onChanged();
        } else {
          decisionDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeDecisionData(SslDecision.ssl_decision_packet value) {
        if (decisionDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              decisionData_ != SslDecision.ssl_decision_packet.getDefaultInstance()) {
            decisionData_ =
              SslDecision.ssl_decision_packet.newBuilder(decisionData_).mergeFrom(value).buildPartial();
          } else {
            decisionData_ = value;
          }
          onChanged();
        } else {
          decisionDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearDecisionData() {
        if (decisionDataBuilder_ == null) {
          decisionData_ = SslDecision.ssl_decision_packet.getDefaultInstance();
          onChanged();
        } else {
          decisionDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public SslDecision.ssl_decision_packet.Builder getDecisionDataBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getDecisionDataFieldBuilder().getBuilder();
      }
      public SslDecision.ssl_decision_packetOrBuilder getDecisionDataOrBuilder() {
        if (decisionDataBuilder_ != null) {
          return decisionDataBuilder_.getMessageOrBuilder();
        } else {
          return decisionData_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslDecision.ssl_decision_packet, SslDecision.ssl_decision_packet.Builder, SslDecision.ssl_decision_packetOrBuilder> 
          getDecisionDataFieldBuilder() {
        if (decisionDataBuilder_ == null) {
          decisionDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslDecision.ssl_decision_packet, SslDecision.ssl_decision_packet.Builder, SslDecision.ssl_decision_packetOrBuilder>(
                  decisionData_,
                  getParentForChildren(),
                  isClean());
          decisionData_ = null;
        }
        return decisionDataBuilder_;
      }
      
      // optional .ssl_planner_packet planner_data = 4;
      private SslPlanner.ssl_planner_packet plannerData_ = SslPlanner.ssl_planner_packet.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.ssl_planner_packet, SslPlanner.ssl_planner_packet.Builder, SslPlanner.ssl_planner_packetOrBuilder> plannerDataBuilder_;
      public boolean hasPlannerData() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public SslPlanner.ssl_planner_packet getPlannerData() {
        if (plannerDataBuilder_ == null) {
          return plannerData_;
        } else {
          return plannerDataBuilder_.getMessage();
        }
      }
      public Builder setPlannerData(SslPlanner.ssl_planner_packet value) {
        if (plannerDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          plannerData_ = value;
          onChanged();
        } else {
          plannerDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setPlannerData(
          SslPlanner.ssl_planner_packet.Builder builderForValue) {
        if (plannerDataBuilder_ == null) {
          plannerData_ = builderForValue.build();
          onChanged();
        } else {
          plannerDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergePlannerData(SslPlanner.ssl_planner_packet value) {
        if (plannerDataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              plannerData_ != SslPlanner.ssl_planner_packet.getDefaultInstance()) {
            plannerData_ =
              SslPlanner.ssl_planner_packet.newBuilder(plannerData_).mergeFrom(value).buildPartial();
          } else {
            plannerData_ = value;
          }
          onChanged();
        } else {
          plannerDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearPlannerData() {
        if (plannerDataBuilder_ == null) {
          plannerData_ = SslPlanner.ssl_planner_packet.getDefaultInstance();
          onChanged();
        } else {
          plannerDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public SslPlanner.ssl_planner_packet.Builder getPlannerDataBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPlannerDataFieldBuilder().getBuilder();
      }
      public SslPlanner.ssl_planner_packetOrBuilder getPlannerDataOrBuilder() {
        if (plannerDataBuilder_ != null) {
          return plannerDataBuilder_.getMessageOrBuilder();
        } else {
          return plannerData_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.ssl_planner_packet, SslPlanner.ssl_planner_packet.Builder, SslPlanner.ssl_planner_packetOrBuilder> 
          getPlannerDataFieldBuilder() {
        if (plannerDataBuilder_ == null) {
          plannerDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.ssl_planner_packet, SslPlanner.ssl_planner_packet.Builder, SslPlanner.ssl_planner_packetOrBuilder>(
                  plannerData_,
                  getParentForChildren(),
                  isClean());
          plannerData_ = null;
        }
        return plannerDataBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:ssl_visualizer_packet)
    }
    
    static {
      defaultInstance = new ssl_visualizer_packet(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ssl_visualizer_packet)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ssl_visualizer_packet_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ssl_visualizer_packet_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024ssl_visualizer.proto\032\017ssl_world.proto\032" +
      "\022ssl_analyzer.proto\032\022ssl_decision.proto\032" +
      "\021ssl_planner.proto\"\303\001\n\025ssl_visualizer_pa" +
      "cket\022%\n\nworld_data\030\001 \001(\0132\021.ssl_world_pac" +
      "ket\022+\n\ranalyzer_data\030\002 \001(\0132\024.ssl_analyze" +
      "r_packet\022+\n\rdecision_data\030\003 \001(\0132\024.ssl_de" +
      "cision_packet\022)\n\014planner_data\030\004 \001(\0132\023.ss" +
      "l_planner_packet"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ssl_visualizer_packet_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ssl_visualizer_packet_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ssl_visualizer_packet_descriptor,
              new java.lang.String[] { "WorldData", "AnalyzerData", "DecisionData", "PlannerData", },
              SslVisualizer.ssl_visualizer_packet.class,
              SslVisualizer.ssl_visualizer_packet.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          SslWorld.getDescriptor(),
          SslAnalyzer.getDescriptor(),
          SslDecision.getDescriptor(),
          SslPlanner.getDescriptor(),
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
