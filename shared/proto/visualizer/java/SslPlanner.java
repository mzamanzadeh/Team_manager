// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_planner.proto

public final class SslPlanner {
  private SslPlanner() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface planner_vec3dOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required float x = 1;
    boolean hasX();
    float getX();
    
    // required float y = 2;
    boolean hasY();
    float getY();
    
    // required float teta = 3;
    boolean hasTeta();
    float getTeta();
  }
  public static final class planner_vec3d extends
      com.google.protobuf.GeneratedMessage
      implements planner_vec3dOrBuilder {
    // Use planner_vec3d.newBuilder() to construct.
    private planner_vec3d(Builder builder) {
      super(builder);
    }
    private planner_vec3d(boolean noInit) {}
    
    private static final planner_vec3d defaultInstance;
    public static planner_vec3d getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_vec3d getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_vec3d_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_vec3d_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required float x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getX() {
      return x_;
    }
    
    // required float y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getY() {
      return y_;
    }
    
    // required float teta = 3;
    public static final int TETA_FIELD_NUMBER = 3;
    private float teta_;
    public boolean hasTeta() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public float getTeta() {
      return teta_;
    }
    
    private void initFields() {
      x_ = 0F;
      y_ = 0F;
      teta_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTeta()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, teta_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, teta_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_vec3d parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_vec3d parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_vec3d parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_vec3d parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_vec3d parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_vec3d prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_vec3dOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_vec3d_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_vec3d_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_vec3d.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        teta_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_vec3d.getDescriptor();
      }
      
      public SslPlanner.planner_vec3d getDefaultInstanceForType() {
        return SslPlanner.planner_vec3d.getDefaultInstance();
      }
      
      public SslPlanner.planner_vec3d build() {
        SslPlanner.planner_vec3d result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_vec3d buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_vec3d result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_vec3d buildPartial() {
        SslPlanner.planner_vec3d result = new SslPlanner.planner_vec3d(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.teta_ = teta_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_vec3d) {
          return mergeFrom((SslPlanner.planner_vec3d)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_vec3d other) {
        if (other == SslPlanner.planner_vec3d.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasTeta()) {
          setTeta(other.getTeta());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasTeta()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              teta_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required float x = 1;
      private float x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getX() {
        return x_;
      }
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }
      
      // required float y = 2;
      private float y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getY() {
        return y_;
      }
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }
      
      // required float teta = 3;
      private float teta_ ;
      public boolean hasTeta() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getTeta() {
        return teta_;
      }
      public Builder setTeta(float value) {
        bitField0_ |= 0x00000004;
        teta_ = value;
        onChanged();
        return this;
      }
      public Builder clearTeta() {
        bitField0_ = (bitField0_ & ~0x00000004);
        teta_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_vec3d)
    }
    
    static {
      defaultInstance = new planner_vec3d(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_vec3d)
  }
  
  public interface planner_point2dOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required float x = 1;
    boolean hasX();
    float getX();
    
    // required float y = 2;
    boolean hasY();
    float getY();
  }
  public static final class planner_point2d extends
      com.google.protobuf.GeneratedMessage
      implements planner_point2dOrBuilder {
    // Use planner_point2d.newBuilder() to construct.
    private planner_point2d(Builder builder) {
      super(builder);
    }
    private planner_point2d(boolean noInit) {}
    
    private static final planner_point2d defaultInstance;
    public static planner_point2d getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_point2d getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_point2d_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_point2d_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required float x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getX() {
      return x_;
    }
    
    // required float y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getY() {
      return y_;
    }
    
    private void initFields() {
      x_ = 0F;
      y_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_point2d parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_point2d parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_point2d parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_point2d parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_point2d parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_point2d prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_point2dOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_point2d_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_point2d_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_point2d.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_point2d.getDescriptor();
      }
      
      public SslPlanner.planner_point2d getDefaultInstanceForType() {
        return SslPlanner.planner_point2d.getDefaultInstance();
      }
      
      public SslPlanner.planner_point2d build() {
        SslPlanner.planner_point2d result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_point2d buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_point2d result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_point2d buildPartial() {
        SslPlanner.planner_point2d result = new SslPlanner.planner_point2d(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_point2d) {
          return mergeFrom((SslPlanner.planner_point2d)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_point2d other) {
        if (other == SslPlanner.planner_point2d.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required float x = 1;
      private float x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getX() {
        return x_;
      }
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }
      
      // required float y = 2;
      private float y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getY() {
        return y_;
      }
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_point2d)
    }
    
    static {
      defaultInstance = new planner_point2d(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_point2d)
  }
  
  public interface planner_circleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .planner_point2d center = 1;
    boolean hasCenter();
    SslPlanner.planner_point2d getCenter();
    SslPlanner.planner_point2dOrBuilder getCenterOrBuilder();
    
    // required float radius = 2;
    boolean hasRadius();
    float getRadius();
    
    // optional float orien = 3;
    boolean hasOrien();
    float getOrien();
  }
  public static final class planner_circle extends
      com.google.protobuf.GeneratedMessage
      implements planner_circleOrBuilder {
    // Use planner_circle.newBuilder() to construct.
    private planner_circle(Builder builder) {
      super(builder);
    }
    private planner_circle(boolean noInit) {}
    
    private static final planner_circle defaultInstance;
    public static planner_circle getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_circle getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_circle_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_circle_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .planner_point2d center = 1;
    public static final int CENTER_FIELD_NUMBER = 1;
    private SslPlanner.planner_point2d center_;
    public boolean hasCenter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public SslPlanner.planner_point2d getCenter() {
      return center_;
    }
    public SslPlanner.planner_point2dOrBuilder getCenterOrBuilder() {
      return center_;
    }
    
    // required float radius = 2;
    public static final int RADIUS_FIELD_NUMBER = 2;
    private float radius_;
    public boolean hasRadius() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getRadius() {
      return radius_;
    }
    
    // optional float orien = 3;
    public static final int ORIEN_FIELD_NUMBER = 3;
    private float orien_;
    public boolean hasOrien() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public float getOrien() {
      return orien_;
    }
    
    private void initFields() {
      center_ = SslPlanner.planner_point2d.getDefaultInstance();
      radius_ = 0F;
      orien_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCenter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRadius()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCenter().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, center_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, radius_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, orien_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, center_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, radius_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, orien_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_circle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_circle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_circle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_circle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_circle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_circle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_circleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_circle_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_circle_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_circle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCenterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (centerBuilder_ == null) {
          center_ = SslPlanner.planner_point2d.getDefaultInstance();
        } else {
          centerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        radius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        orien_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_circle.getDescriptor();
      }
      
      public SslPlanner.planner_circle getDefaultInstanceForType() {
        return SslPlanner.planner_circle.getDefaultInstance();
      }
      
      public SslPlanner.planner_circle build() {
        SslPlanner.planner_circle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_circle buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_circle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_circle buildPartial() {
        SslPlanner.planner_circle result = new SslPlanner.planner_circle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (centerBuilder_ == null) {
          result.center_ = center_;
        } else {
          result.center_ = centerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.radius_ = radius_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.orien_ = orien_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_circle) {
          return mergeFrom((SslPlanner.planner_circle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_circle other) {
        if (other == SslPlanner.planner_circle.getDefaultInstance()) return this;
        if (other.hasCenter()) {
          mergeCenter(other.getCenter());
        }
        if (other.hasRadius()) {
          setRadius(other.getRadius());
        }
        if (other.hasOrien()) {
          setOrien(other.getOrien());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCenter()) {
          
          return false;
        }
        if (!hasRadius()) {
          
          return false;
        }
        if (!getCenter().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              SslPlanner.planner_point2d.Builder subBuilder = SslPlanner.planner_point2d.newBuilder();
              if (hasCenter()) {
                subBuilder.mergeFrom(getCenter());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCenter(subBuilder.buildPartial());
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              radius_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              orien_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .planner_point2d center = 1;
      private SslPlanner.planner_point2d center_ = SslPlanner.planner_point2d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder> centerBuilder_;
      public boolean hasCenter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public SslPlanner.planner_point2d getCenter() {
        if (centerBuilder_ == null) {
          return center_;
        } else {
          return centerBuilder_.getMessage();
        }
      }
      public Builder setCenter(SslPlanner.planner_point2d value) {
        if (centerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          center_ = value;
          onChanged();
        } else {
          centerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCenter(
          SslPlanner.planner_point2d.Builder builderForValue) {
        if (centerBuilder_ == null) {
          center_ = builderForValue.build();
          onChanged();
        } else {
          centerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCenter(SslPlanner.planner_point2d value) {
        if (centerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              center_ != SslPlanner.planner_point2d.getDefaultInstance()) {
            center_ =
              SslPlanner.planner_point2d.newBuilder(center_).mergeFrom(value).buildPartial();
          } else {
            center_ = value;
          }
          onChanged();
        } else {
          centerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCenter() {
        if (centerBuilder_ == null) {
          center_ = SslPlanner.planner_point2d.getDefaultInstance();
          onChanged();
        } else {
          centerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public SslPlanner.planner_point2d.Builder getCenterBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCenterFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_point2dOrBuilder getCenterOrBuilder() {
        if (centerBuilder_ != null) {
          return centerBuilder_.getMessageOrBuilder();
        } else {
          return center_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder> 
          getCenterFieldBuilder() {
        if (centerBuilder_ == null) {
          centerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder>(
                  center_,
                  getParentForChildren(),
                  isClean());
          center_ = null;
        }
        return centerBuilder_;
      }
      
      // required float radius = 2;
      private float radius_ ;
      public boolean hasRadius() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getRadius() {
        return radius_;
      }
      public Builder setRadius(float value) {
        bitField0_ |= 0x00000002;
        radius_ = value;
        onChanged();
        return this;
      }
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000002);
        radius_ = 0F;
        onChanged();
        return this;
      }
      
      // optional float orien = 3;
      private float orien_ ;
      public boolean hasOrien() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getOrien() {
        return orien_;
      }
      public Builder setOrien(float value) {
        bitField0_ |= 0x00000004;
        orien_ = value;
        onChanged();
        return this;
      }
      public Builder clearOrien() {
        bitField0_ = (bitField0_ & ~0x00000004);
        orien_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_circle)
    }
    
    static {
      defaultInstance = new planner_circle(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_circle)
  }
  
  public interface planner_polygonOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .planner_point2d vertex = 1;
    java.util.List<SslPlanner.planner_point2d> 
        getVertexList();
    SslPlanner.planner_point2d getVertex(int index);
    int getVertexCount();
    java.util.List<? extends SslPlanner.planner_point2dOrBuilder> 
        getVertexOrBuilderList();
    SslPlanner.planner_point2dOrBuilder getVertexOrBuilder(
        int index);
    
    // optional float orien = 2;
    boolean hasOrien();
    float getOrien();
  }
  public static final class planner_polygon extends
      com.google.protobuf.GeneratedMessage
      implements planner_polygonOrBuilder {
    // Use planner_polygon.newBuilder() to construct.
    private planner_polygon(Builder builder) {
      super(builder);
    }
    private planner_polygon(boolean noInit) {}
    
    private static final planner_polygon defaultInstance;
    public static planner_polygon getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_polygon getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_polygon_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_polygon_fieldAccessorTable;
    }
    
    private int bitField0_;
    // repeated .planner_point2d vertex = 1;
    public static final int VERTEX_FIELD_NUMBER = 1;
    private java.util.List<SslPlanner.planner_point2d> vertex_;
    public java.util.List<SslPlanner.planner_point2d> getVertexList() {
      return vertex_;
    }
    public java.util.List<? extends SslPlanner.planner_point2dOrBuilder> 
        getVertexOrBuilderList() {
      return vertex_;
    }
    public int getVertexCount() {
      return vertex_.size();
    }
    public SslPlanner.planner_point2d getVertex(int index) {
      return vertex_.get(index);
    }
    public SslPlanner.planner_point2dOrBuilder getVertexOrBuilder(
        int index) {
      return vertex_.get(index);
    }
    
    // optional float orien = 2;
    public static final int ORIEN_FIELD_NUMBER = 2;
    private float orien_;
    public boolean hasOrien() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getOrien() {
      return orien_;
    }
    
    private void initFields() {
      vertex_ = java.util.Collections.emptyList();
      orien_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getVertexCount(); i++) {
        if (!getVertex(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < vertex_.size(); i++) {
        output.writeMessage(1, vertex_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(2, orien_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < vertex_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, vertex_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, orien_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_polygon parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_polygon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_polygon parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_polygon parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_polygon parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_polygon prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_polygonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_polygon_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_polygon_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_polygon.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getVertexFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (vertexBuilder_ == null) {
          vertex_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          vertexBuilder_.clear();
        }
        orien_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_polygon.getDescriptor();
      }
      
      public SslPlanner.planner_polygon getDefaultInstanceForType() {
        return SslPlanner.planner_polygon.getDefaultInstance();
      }
      
      public SslPlanner.planner_polygon build() {
        SslPlanner.planner_polygon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_polygon buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_polygon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_polygon buildPartial() {
        SslPlanner.planner_polygon result = new SslPlanner.planner_polygon(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (vertexBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            vertex_ = java.util.Collections.unmodifiableList(vertex_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.vertex_ = vertex_;
        } else {
          result.vertex_ = vertexBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.orien_ = orien_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_polygon) {
          return mergeFrom((SslPlanner.planner_polygon)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_polygon other) {
        if (other == SslPlanner.planner_polygon.getDefaultInstance()) return this;
        if (vertexBuilder_ == null) {
          if (!other.vertex_.isEmpty()) {
            if (vertex_.isEmpty()) {
              vertex_ = other.vertex_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureVertexIsMutable();
              vertex_.addAll(other.vertex_);
            }
            onChanged();
          }
        } else {
          if (!other.vertex_.isEmpty()) {
            if (vertexBuilder_.isEmpty()) {
              vertexBuilder_.dispose();
              vertexBuilder_ = null;
              vertex_ = other.vertex_;
              bitField0_ = (bitField0_ & ~0x00000001);
              vertexBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVertexFieldBuilder() : null;
            } else {
              vertexBuilder_.addAllMessages(other.vertex_);
            }
          }
        }
        if (other.hasOrien()) {
          setOrien(other.getOrien());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getVertexCount(); i++) {
          if (!getVertex(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              SslPlanner.planner_point2d.Builder subBuilder = SslPlanner.planner_point2d.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addVertex(subBuilder.buildPartial());
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              orien_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .planner_point2d vertex = 1;
      private java.util.List<SslPlanner.planner_point2d> vertex_ =
        java.util.Collections.emptyList();
      private void ensureVertexIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          vertex_ = new java.util.ArrayList<SslPlanner.planner_point2d>(vertex_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder> vertexBuilder_;
      
      public java.util.List<SslPlanner.planner_point2d> getVertexList() {
        if (vertexBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vertex_);
        } else {
          return vertexBuilder_.getMessageList();
        }
      }
      public int getVertexCount() {
        if (vertexBuilder_ == null) {
          return vertex_.size();
        } else {
          return vertexBuilder_.getCount();
        }
      }
      public SslPlanner.planner_point2d getVertex(int index) {
        if (vertexBuilder_ == null) {
          return vertex_.get(index);
        } else {
          return vertexBuilder_.getMessage(index);
        }
      }
      public Builder setVertex(
          int index, SslPlanner.planner_point2d value) {
        if (vertexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVertexIsMutable();
          vertex_.set(index, value);
          onChanged();
        } else {
          vertexBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setVertex(
          int index, SslPlanner.planner_point2d.Builder builderForValue) {
        if (vertexBuilder_ == null) {
          ensureVertexIsMutable();
          vertex_.set(index, builderForValue.build());
          onChanged();
        } else {
          vertexBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addVertex(SslPlanner.planner_point2d value) {
        if (vertexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVertexIsMutable();
          vertex_.add(value);
          onChanged();
        } else {
          vertexBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addVertex(
          int index, SslPlanner.planner_point2d value) {
        if (vertexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVertexIsMutable();
          vertex_.add(index, value);
          onChanged();
        } else {
          vertexBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addVertex(
          SslPlanner.planner_point2d.Builder builderForValue) {
        if (vertexBuilder_ == null) {
          ensureVertexIsMutable();
          vertex_.add(builderForValue.build());
          onChanged();
        } else {
          vertexBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addVertex(
          int index, SslPlanner.planner_point2d.Builder builderForValue) {
        if (vertexBuilder_ == null) {
          ensureVertexIsMutable();
          vertex_.add(index, builderForValue.build());
          onChanged();
        } else {
          vertexBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllVertex(
          java.lang.Iterable<? extends SslPlanner.planner_point2d> values) {
        if (vertexBuilder_ == null) {
          ensureVertexIsMutable();
          super.addAll(values, vertex_);
          onChanged();
        } else {
          vertexBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearVertex() {
        if (vertexBuilder_ == null) {
          vertex_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          vertexBuilder_.clear();
        }
        return this;
      }
      public Builder removeVertex(int index) {
        if (vertexBuilder_ == null) {
          ensureVertexIsMutable();
          vertex_.remove(index);
          onChanged();
        } else {
          vertexBuilder_.remove(index);
        }
        return this;
      }
      public SslPlanner.planner_point2d.Builder getVertexBuilder(
          int index) {
        return getVertexFieldBuilder().getBuilder(index);
      }
      public SslPlanner.planner_point2dOrBuilder getVertexOrBuilder(
          int index) {
        if (vertexBuilder_ == null) {
          return vertex_.get(index);  } else {
          return vertexBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends SslPlanner.planner_point2dOrBuilder> 
           getVertexOrBuilderList() {
        if (vertexBuilder_ != null) {
          return vertexBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vertex_);
        }
      }
      public SslPlanner.planner_point2d.Builder addVertexBuilder() {
        return getVertexFieldBuilder().addBuilder(
            SslPlanner.planner_point2d.getDefaultInstance());
      }
      public SslPlanner.planner_point2d.Builder addVertexBuilder(
          int index) {
        return getVertexFieldBuilder().addBuilder(
            index, SslPlanner.planner_point2d.getDefaultInstance());
      }
      public java.util.List<SslPlanner.planner_point2d.Builder> 
           getVertexBuilderList() {
        return getVertexFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder> 
          getVertexFieldBuilder() {
        if (vertexBuilder_ == null) {
          vertexBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SslPlanner.planner_point2d, SslPlanner.planner_point2d.Builder, SslPlanner.planner_point2dOrBuilder>(
                  vertex_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          vertex_ = null;
        }
        return vertexBuilder_;
      }
      
      // optional float orien = 2;
      private float orien_ ;
      public boolean hasOrien() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getOrien() {
        return orien_;
      }
      public Builder setOrien(float value) {
        bitField0_ |= 0x00000002;
        orien_ = value;
        onChanged();
        return this;
      }
      public Builder clearOrien() {
        bitField0_ = (bitField0_ & ~0x00000002);
        orien_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_polygon)
    }
    
    static {
      defaultInstance = new planner_polygon(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_polygon)
  }
  
  public interface planner_obstaclesOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .planner_circle circles = 1;
    java.util.List<SslPlanner.planner_circle> 
        getCirclesList();
    SslPlanner.planner_circle getCircles(int index);
    int getCirclesCount();
    java.util.List<? extends SslPlanner.planner_circleOrBuilder> 
        getCirclesOrBuilderList();
    SslPlanner.planner_circleOrBuilder getCirclesOrBuilder(
        int index);
    
    // repeated .planner_polygon polygons = 2;
    java.util.List<SslPlanner.planner_polygon> 
        getPolygonsList();
    SslPlanner.planner_polygon getPolygons(int index);
    int getPolygonsCount();
    java.util.List<? extends SslPlanner.planner_polygonOrBuilder> 
        getPolygonsOrBuilderList();
    SslPlanner.planner_polygonOrBuilder getPolygonsOrBuilder(
        int index);
  }
  public static final class planner_obstacles extends
      com.google.protobuf.GeneratedMessage
      implements planner_obstaclesOrBuilder {
    // Use planner_obstacles.newBuilder() to construct.
    private planner_obstacles(Builder builder) {
      super(builder);
    }
    private planner_obstacles(boolean noInit) {}
    
    private static final planner_obstacles defaultInstance;
    public static planner_obstacles getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_obstacles getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_obstacles_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_obstacles_fieldAccessorTable;
    }
    
    // repeated .planner_circle circles = 1;
    public static final int CIRCLES_FIELD_NUMBER = 1;
    private java.util.List<SslPlanner.planner_circle> circles_;
    public java.util.List<SslPlanner.planner_circle> getCirclesList() {
      return circles_;
    }
    public java.util.List<? extends SslPlanner.planner_circleOrBuilder> 
        getCirclesOrBuilderList() {
      return circles_;
    }
    public int getCirclesCount() {
      return circles_.size();
    }
    public SslPlanner.planner_circle getCircles(int index) {
      return circles_.get(index);
    }
    public SslPlanner.planner_circleOrBuilder getCirclesOrBuilder(
        int index) {
      return circles_.get(index);
    }
    
    // repeated .planner_polygon polygons = 2;
    public static final int POLYGONS_FIELD_NUMBER = 2;
    private java.util.List<SslPlanner.planner_polygon> polygons_;
    public java.util.List<SslPlanner.planner_polygon> getPolygonsList() {
      return polygons_;
    }
    public java.util.List<? extends SslPlanner.planner_polygonOrBuilder> 
        getPolygonsOrBuilderList() {
      return polygons_;
    }
    public int getPolygonsCount() {
      return polygons_.size();
    }
    public SslPlanner.planner_polygon getPolygons(int index) {
      return polygons_.get(index);
    }
    public SslPlanner.planner_polygonOrBuilder getPolygonsOrBuilder(
        int index) {
      return polygons_.get(index);
    }
    
    private void initFields() {
      circles_ = java.util.Collections.emptyList();
      polygons_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getCirclesCount(); i++) {
        if (!getCircles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPolygonsCount(); i++) {
        if (!getPolygons(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < circles_.size(); i++) {
        output.writeMessage(1, circles_.get(i));
      }
      for (int i = 0; i < polygons_.size(); i++) {
        output.writeMessage(2, polygons_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < circles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, circles_.get(i));
      }
      for (int i = 0; i < polygons_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, polygons_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_obstacles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_obstacles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_obstacles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_obstacles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_obstacles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_obstacles prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_obstaclesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_obstacles_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_obstacles_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_obstacles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCirclesFieldBuilder();
          getPolygonsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (circlesBuilder_ == null) {
          circles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          circlesBuilder_.clear();
        }
        if (polygonsBuilder_ == null) {
          polygons_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          polygonsBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_obstacles.getDescriptor();
      }
      
      public SslPlanner.planner_obstacles getDefaultInstanceForType() {
        return SslPlanner.planner_obstacles.getDefaultInstance();
      }
      
      public SslPlanner.planner_obstacles build() {
        SslPlanner.planner_obstacles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_obstacles buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_obstacles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_obstacles buildPartial() {
        SslPlanner.planner_obstacles result = new SslPlanner.planner_obstacles(this);
        int from_bitField0_ = bitField0_;
        if (circlesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            circles_ = java.util.Collections.unmodifiableList(circles_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.circles_ = circles_;
        } else {
          result.circles_ = circlesBuilder_.build();
        }
        if (polygonsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            polygons_ = java.util.Collections.unmodifiableList(polygons_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.polygons_ = polygons_;
        } else {
          result.polygons_ = polygonsBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_obstacles) {
          return mergeFrom((SslPlanner.planner_obstacles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_obstacles other) {
        if (other == SslPlanner.planner_obstacles.getDefaultInstance()) return this;
        if (circlesBuilder_ == null) {
          if (!other.circles_.isEmpty()) {
            if (circles_.isEmpty()) {
              circles_ = other.circles_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCirclesIsMutable();
              circles_.addAll(other.circles_);
            }
            onChanged();
          }
        } else {
          if (!other.circles_.isEmpty()) {
            if (circlesBuilder_.isEmpty()) {
              circlesBuilder_.dispose();
              circlesBuilder_ = null;
              circles_ = other.circles_;
              bitField0_ = (bitField0_ & ~0x00000001);
              circlesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCirclesFieldBuilder() : null;
            } else {
              circlesBuilder_.addAllMessages(other.circles_);
            }
          }
        }
        if (polygonsBuilder_ == null) {
          if (!other.polygons_.isEmpty()) {
            if (polygons_.isEmpty()) {
              polygons_ = other.polygons_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePolygonsIsMutable();
              polygons_.addAll(other.polygons_);
            }
            onChanged();
          }
        } else {
          if (!other.polygons_.isEmpty()) {
            if (polygonsBuilder_.isEmpty()) {
              polygonsBuilder_.dispose();
              polygonsBuilder_ = null;
              polygons_ = other.polygons_;
              bitField0_ = (bitField0_ & ~0x00000002);
              polygonsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPolygonsFieldBuilder() : null;
            } else {
              polygonsBuilder_.addAllMessages(other.polygons_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getCirclesCount(); i++) {
          if (!getCircles(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getPolygonsCount(); i++) {
          if (!getPolygons(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              SslPlanner.planner_circle.Builder subBuilder = SslPlanner.planner_circle.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCircles(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SslPlanner.planner_polygon.Builder subBuilder = SslPlanner.planner_polygon.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPolygons(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .planner_circle circles = 1;
      private java.util.List<SslPlanner.planner_circle> circles_ =
        java.util.Collections.emptyList();
      private void ensureCirclesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          circles_ = new java.util.ArrayList<SslPlanner.planner_circle>(circles_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_circle, SslPlanner.planner_circle.Builder, SslPlanner.planner_circleOrBuilder> circlesBuilder_;
      
      public java.util.List<SslPlanner.planner_circle> getCirclesList() {
        if (circlesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(circles_);
        } else {
          return circlesBuilder_.getMessageList();
        }
      }
      public int getCirclesCount() {
        if (circlesBuilder_ == null) {
          return circles_.size();
        } else {
          return circlesBuilder_.getCount();
        }
      }
      public SslPlanner.planner_circle getCircles(int index) {
        if (circlesBuilder_ == null) {
          return circles_.get(index);
        } else {
          return circlesBuilder_.getMessage(index);
        }
      }
      public Builder setCircles(
          int index, SslPlanner.planner_circle value) {
        if (circlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCirclesIsMutable();
          circles_.set(index, value);
          onChanged();
        } else {
          circlesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setCircles(
          int index, SslPlanner.planner_circle.Builder builderForValue) {
        if (circlesBuilder_ == null) {
          ensureCirclesIsMutable();
          circles_.set(index, builderForValue.build());
          onChanged();
        } else {
          circlesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addCircles(SslPlanner.planner_circle value) {
        if (circlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCirclesIsMutable();
          circles_.add(value);
          onChanged();
        } else {
          circlesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addCircles(
          int index, SslPlanner.planner_circle value) {
        if (circlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCirclesIsMutable();
          circles_.add(index, value);
          onChanged();
        } else {
          circlesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addCircles(
          SslPlanner.planner_circle.Builder builderForValue) {
        if (circlesBuilder_ == null) {
          ensureCirclesIsMutable();
          circles_.add(builderForValue.build());
          onChanged();
        } else {
          circlesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addCircles(
          int index, SslPlanner.planner_circle.Builder builderForValue) {
        if (circlesBuilder_ == null) {
          ensureCirclesIsMutable();
          circles_.add(index, builderForValue.build());
          onChanged();
        } else {
          circlesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllCircles(
          java.lang.Iterable<? extends SslPlanner.planner_circle> values) {
        if (circlesBuilder_ == null) {
          ensureCirclesIsMutable();
          super.addAll(values, circles_);
          onChanged();
        } else {
          circlesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearCircles() {
        if (circlesBuilder_ == null) {
          circles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          circlesBuilder_.clear();
        }
        return this;
      }
      public Builder removeCircles(int index) {
        if (circlesBuilder_ == null) {
          ensureCirclesIsMutable();
          circles_.remove(index);
          onChanged();
        } else {
          circlesBuilder_.remove(index);
        }
        return this;
      }
      public SslPlanner.planner_circle.Builder getCirclesBuilder(
          int index) {
        return getCirclesFieldBuilder().getBuilder(index);
      }
      public SslPlanner.planner_circleOrBuilder getCirclesOrBuilder(
          int index) {
        if (circlesBuilder_ == null) {
          return circles_.get(index);  } else {
          return circlesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends SslPlanner.planner_circleOrBuilder> 
           getCirclesOrBuilderList() {
        if (circlesBuilder_ != null) {
          return circlesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(circles_);
        }
      }
      public SslPlanner.planner_circle.Builder addCirclesBuilder() {
        return getCirclesFieldBuilder().addBuilder(
            SslPlanner.planner_circle.getDefaultInstance());
      }
      public SslPlanner.planner_circle.Builder addCirclesBuilder(
          int index) {
        return getCirclesFieldBuilder().addBuilder(
            index, SslPlanner.planner_circle.getDefaultInstance());
      }
      public java.util.List<SslPlanner.planner_circle.Builder> 
           getCirclesBuilderList() {
        return getCirclesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_circle, SslPlanner.planner_circle.Builder, SslPlanner.planner_circleOrBuilder> 
          getCirclesFieldBuilder() {
        if (circlesBuilder_ == null) {
          circlesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SslPlanner.planner_circle, SslPlanner.planner_circle.Builder, SslPlanner.planner_circleOrBuilder>(
                  circles_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          circles_ = null;
        }
        return circlesBuilder_;
      }
      
      // repeated .planner_polygon polygons = 2;
      private java.util.List<SslPlanner.planner_polygon> polygons_ =
        java.util.Collections.emptyList();
      private void ensurePolygonsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          polygons_ = new java.util.ArrayList<SslPlanner.planner_polygon>(polygons_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder> polygonsBuilder_;
      
      public java.util.List<SslPlanner.planner_polygon> getPolygonsList() {
        if (polygonsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(polygons_);
        } else {
          return polygonsBuilder_.getMessageList();
        }
      }
      public int getPolygonsCount() {
        if (polygonsBuilder_ == null) {
          return polygons_.size();
        } else {
          return polygonsBuilder_.getCount();
        }
      }
      public SslPlanner.planner_polygon getPolygons(int index) {
        if (polygonsBuilder_ == null) {
          return polygons_.get(index);
        } else {
          return polygonsBuilder_.getMessage(index);
        }
      }
      public Builder setPolygons(
          int index, SslPlanner.planner_polygon value) {
        if (polygonsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonsIsMutable();
          polygons_.set(index, value);
          onChanged();
        } else {
          polygonsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setPolygons(
          int index, SslPlanner.planner_polygon.Builder builderForValue) {
        if (polygonsBuilder_ == null) {
          ensurePolygonsIsMutable();
          polygons_.set(index, builderForValue.build());
          onChanged();
        } else {
          polygonsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addPolygons(SslPlanner.planner_polygon value) {
        if (polygonsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonsIsMutable();
          polygons_.add(value);
          onChanged();
        } else {
          polygonsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addPolygons(
          int index, SslPlanner.planner_polygon value) {
        if (polygonsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonsIsMutable();
          polygons_.add(index, value);
          onChanged();
        } else {
          polygonsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addPolygons(
          SslPlanner.planner_polygon.Builder builderForValue) {
        if (polygonsBuilder_ == null) {
          ensurePolygonsIsMutable();
          polygons_.add(builderForValue.build());
          onChanged();
        } else {
          polygonsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addPolygons(
          int index, SslPlanner.planner_polygon.Builder builderForValue) {
        if (polygonsBuilder_ == null) {
          ensurePolygonsIsMutable();
          polygons_.add(index, builderForValue.build());
          onChanged();
        } else {
          polygonsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllPolygons(
          java.lang.Iterable<? extends SslPlanner.planner_polygon> values) {
        if (polygonsBuilder_ == null) {
          ensurePolygonsIsMutable();
          super.addAll(values, polygons_);
          onChanged();
        } else {
          polygonsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearPolygons() {
        if (polygonsBuilder_ == null) {
          polygons_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          polygonsBuilder_.clear();
        }
        return this;
      }
      public Builder removePolygons(int index) {
        if (polygonsBuilder_ == null) {
          ensurePolygonsIsMutable();
          polygons_.remove(index);
          onChanged();
        } else {
          polygonsBuilder_.remove(index);
        }
        return this;
      }
      public SslPlanner.planner_polygon.Builder getPolygonsBuilder(
          int index) {
        return getPolygonsFieldBuilder().getBuilder(index);
      }
      public SslPlanner.planner_polygonOrBuilder getPolygonsOrBuilder(
          int index) {
        if (polygonsBuilder_ == null) {
          return polygons_.get(index);  } else {
          return polygonsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends SslPlanner.planner_polygonOrBuilder> 
           getPolygonsOrBuilderList() {
        if (polygonsBuilder_ != null) {
          return polygonsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(polygons_);
        }
      }
      public SslPlanner.planner_polygon.Builder addPolygonsBuilder() {
        return getPolygonsFieldBuilder().addBuilder(
            SslPlanner.planner_polygon.getDefaultInstance());
      }
      public SslPlanner.planner_polygon.Builder addPolygonsBuilder(
          int index) {
        return getPolygonsFieldBuilder().addBuilder(
            index, SslPlanner.planner_polygon.getDefaultInstance());
      }
      public java.util.List<SslPlanner.planner_polygon.Builder> 
           getPolygonsBuilderList() {
        return getPolygonsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder> 
          getPolygonsFieldBuilder() {
        if (polygonsBuilder_ == null) {
          polygonsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder>(
                  polygons_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          polygons_ = null;
        }
        return polygonsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_obstacles)
    }
    
    static {
      defaultInstance = new planner_obstacles(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_obstacles)
  }
  
  public interface planner_planOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required uint32 id = 1;
    boolean hasId();
    int getId();
    
    // repeated .planner_vec3d pathState = 2;
    java.util.List<SslPlanner.planner_vec3d> 
        getPathStateList();
    SslPlanner.planner_vec3d getPathState(int index);
    int getPathStateCount();
    java.util.List<? extends SslPlanner.planner_vec3dOrBuilder> 
        getPathStateOrBuilderList();
    SslPlanner.planner_vec3dOrBuilder getPathStateOrBuilder(
        int index);
    
    // required .planner_vec3d initState = 3;
    boolean hasInitState();
    SslPlanner.planner_vec3d getInitState();
    SslPlanner.planner_vec3dOrBuilder getInitStateOrBuilder();
    
    // required .planner_vec3d goalState = 4;
    boolean hasGoalState();
    SslPlanner.planner_vec3d getGoalState();
    SslPlanner.planner_vec3dOrBuilder getGoalStateOrBuilder();
    
    // required .planner_vec3d desiredVel = 5;
    boolean hasDesiredVel();
    SslPlanner.planner_vec3d getDesiredVel();
    SslPlanner.planner_vec3dOrBuilder getDesiredVelOrBuilder();
    
    // required .planner_vec3d appliedVel = 6;
    boolean hasAppliedVel();
    SslPlanner.planner_vec3d getAppliedVel();
    SslPlanner.planner_vec3dOrBuilder getAppliedVelOrBuilder();
    
    // optional .planner_obstacles obstacleSet = 7;
    boolean hasObstacleSet();
    SslPlanner.planner_obstacles getObstacleSet();
    SslPlanner.planner_obstaclesOrBuilder getObstacleSetOrBuilder();
  }
  public static final class planner_plan extends
      com.google.protobuf.GeneratedMessage
      implements planner_planOrBuilder {
    // Use planner_plan.newBuilder() to construct.
    private planner_plan(Builder builder) {
      super(builder);
    }
    private planner_plan(boolean noInit) {}
    
    private static final planner_plan defaultInstance;
    public static planner_plan getDefaultInstance() {
      return defaultInstance;
    }
    
    public planner_plan getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_planner_plan_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_planner_plan_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getId() {
      return id_;
    }
    
    // repeated .planner_vec3d pathState = 2;
    public static final int PATHSTATE_FIELD_NUMBER = 2;
    private java.util.List<SslPlanner.planner_vec3d> pathState_;
    public java.util.List<SslPlanner.planner_vec3d> getPathStateList() {
      return pathState_;
    }
    public java.util.List<? extends SslPlanner.planner_vec3dOrBuilder> 
        getPathStateOrBuilderList() {
      return pathState_;
    }
    public int getPathStateCount() {
      return pathState_.size();
    }
    public SslPlanner.planner_vec3d getPathState(int index) {
      return pathState_.get(index);
    }
    public SslPlanner.planner_vec3dOrBuilder getPathStateOrBuilder(
        int index) {
      return pathState_.get(index);
    }
    
    // required .planner_vec3d initState = 3;
    public static final int INITSTATE_FIELD_NUMBER = 3;
    private SslPlanner.planner_vec3d initState_;
    public boolean hasInitState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public SslPlanner.planner_vec3d getInitState() {
      return initState_;
    }
    public SslPlanner.planner_vec3dOrBuilder getInitStateOrBuilder() {
      return initState_;
    }
    
    // required .planner_vec3d goalState = 4;
    public static final int GOALSTATE_FIELD_NUMBER = 4;
    private SslPlanner.planner_vec3d goalState_;
    public boolean hasGoalState() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public SslPlanner.planner_vec3d getGoalState() {
      return goalState_;
    }
    public SslPlanner.planner_vec3dOrBuilder getGoalStateOrBuilder() {
      return goalState_;
    }
    
    // required .planner_vec3d desiredVel = 5;
    public static final int DESIREDVEL_FIELD_NUMBER = 5;
    private SslPlanner.planner_vec3d desiredVel_;
    public boolean hasDesiredVel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public SslPlanner.planner_vec3d getDesiredVel() {
      return desiredVel_;
    }
    public SslPlanner.planner_vec3dOrBuilder getDesiredVelOrBuilder() {
      return desiredVel_;
    }
    
    // required .planner_vec3d appliedVel = 6;
    public static final int APPLIEDVEL_FIELD_NUMBER = 6;
    private SslPlanner.planner_vec3d appliedVel_;
    public boolean hasAppliedVel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public SslPlanner.planner_vec3d getAppliedVel() {
      return appliedVel_;
    }
    public SslPlanner.planner_vec3dOrBuilder getAppliedVelOrBuilder() {
      return appliedVel_;
    }
    
    // optional .planner_obstacles obstacleSet = 7;
    public static final int OBSTACLESET_FIELD_NUMBER = 7;
    private SslPlanner.planner_obstacles obstacleSet_;
    public boolean hasObstacleSet() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public SslPlanner.planner_obstacles getObstacleSet() {
      return obstacleSet_;
    }
    public SslPlanner.planner_obstaclesOrBuilder getObstacleSetOrBuilder() {
      return obstacleSet_;
    }
    
    private void initFields() {
      id_ = 0;
      pathState_ = java.util.Collections.emptyList();
      initState_ = SslPlanner.planner_vec3d.getDefaultInstance();
      goalState_ = SslPlanner.planner_vec3d.getDefaultInstance();
      desiredVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
      appliedVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
      obstacleSet_ = SslPlanner.planner_obstacles.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInitState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoalState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDesiredVel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAppliedVel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPathStateCount(); i++) {
        if (!getPathState(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getInitState().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getGoalState().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getDesiredVel().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAppliedVel().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasObstacleSet()) {
        if (!getObstacleSet().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      for (int i = 0; i < pathState_.size(); i++) {
        output.writeMessage(2, pathState_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, initState_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, goalState_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, desiredVel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, appliedVel_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, obstacleSet_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      for (int i = 0; i < pathState_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, pathState_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, initState_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, goalState_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, desiredVel_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, appliedVel_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, obstacleSet_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.planner_plan parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.planner_plan parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_plan parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.planner_plan parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.planner_plan parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.planner_plan prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.planner_planOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_planner_plan_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_planner_plan_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.planner_plan.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPathStateFieldBuilder();
          getInitStateFieldBuilder();
          getGoalStateFieldBuilder();
          getDesiredVelFieldBuilder();
          getAppliedVelFieldBuilder();
          getObstacleSetFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (pathStateBuilder_ == null) {
          pathState_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          pathStateBuilder_.clear();
        }
        if (initStateBuilder_ == null) {
          initState_ = SslPlanner.planner_vec3d.getDefaultInstance();
        } else {
          initStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (goalStateBuilder_ == null) {
          goalState_ = SslPlanner.planner_vec3d.getDefaultInstance();
        } else {
          goalStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (desiredVelBuilder_ == null) {
          desiredVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
        } else {
          desiredVelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (appliedVelBuilder_ == null) {
          appliedVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
        } else {
          appliedVelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (obstacleSetBuilder_ == null) {
          obstacleSet_ = SslPlanner.planner_obstacles.getDefaultInstance();
        } else {
          obstacleSetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.planner_plan.getDescriptor();
      }
      
      public SslPlanner.planner_plan getDefaultInstanceForType() {
        return SslPlanner.planner_plan.getDefaultInstance();
      }
      
      public SslPlanner.planner_plan build() {
        SslPlanner.planner_plan result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.planner_plan buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.planner_plan result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.planner_plan buildPartial() {
        SslPlanner.planner_plan result = new SslPlanner.planner_plan(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (pathStateBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            pathState_ = java.util.Collections.unmodifiableList(pathState_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.pathState_ = pathState_;
        } else {
          result.pathState_ = pathStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (initStateBuilder_ == null) {
          result.initState_ = initState_;
        } else {
          result.initState_ = initStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (goalStateBuilder_ == null) {
          result.goalState_ = goalState_;
        } else {
          result.goalState_ = goalStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (desiredVelBuilder_ == null) {
          result.desiredVel_ = desiredVel_;
        } else {
          result.desiredVel_ = desiredVelBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        if (appliedVelBuilder_ == null) {
          result.appliedVel_ = appliedVel_;
        } else {
          result.appliedVel_ = appliedVelBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        if (obstacleSetBuilder_ == null) {
          result.obstacleSet_ = obstacleSet_;
        } else {
          result.obstacleSet_ = obstacleSetBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.planner_plan) {
          return mergeFrom((SslPlanner.planner_plan)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.planner_plan other) {
        if (other == SslPlanner.planner_plan.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (pathStateBuilder_ == null) {
          if (!other.pathState_.isEmpty()) {
            if (pathState_.isEmpty()) {
              pathState_ = other.pathState_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePathStateIsMutable();
              pathState_.addAll(other.pathState_);
            }
            onChanged();
          }
        } else {
          if (!other.pathState_.isEmpty()) {
            if (pathStateBuilder_.isEmpty()) {
              pathStateBuilder_.dispose();
              pathStateBuilder_ = null;
              pathState_ = other.pathState_;
              bitField0_ = (bitField0_ & ~0x00000002);
              pathStateBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPathStateFieldBuilder() : null;
            } else {
              pathStateBuilder_.addAllMessages(other.pathState_);
            }
          }
        }
        if (other.hasInitState()) {
          mergeInitState(other.getInitState());
        }
        if (other.hasGoalState()) {
          mergeGoalState(other.getGoalState());
        }
        if (other.hasDesiredVel()) {
          mergeDesiredVel(other.getDesiredVel());
        }
        if (other.hasAppliedVel()) {
          mergeAppliedVel(other.getAppliedVel());
        }
        if (other.hasObstacleSet()) {
          mergeObstacleSet(other.getObstacleSet());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasInitState()) {
          
          return false;
        }
        if (!hasGoalState()) {
          
          return false;
        }
        if (!hasDesiredVel()) {
          
          return false;
        }
        if (!hasAppliedVel()) {
          
          return false;
        }
        for (int i = 0; i < getPathStateCount(); i++) {
          if (!getPathState(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getInitState().isInitialized()) {
          
          return false;
        }
        if (!getGoalState().isInitialized()) {
          
          return false;
        }
        if (!getDesiredVel().isInitialized()) {
          
          return false;
        }
        if (!getAppliedVel().isInitialized()) {
          
          return false;
        }
        if (hasObstacleSet()) {
          if (!getObstacleSet().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              SslPlanner.planner_vec3d.Builder subBuilder = SslPlanner.planner_vec3d.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPathState(subBuilder.buildPartial());
              break;
            }
            case 26: {
              SslPlanner.planner_vec3d.Builder subBuilder = SslPlanner.planner_vec3d.newBuilder();
              if (hasInitState()) {
                subBuilder.mergeFrom(getInitState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setInitState(subBuilder.buildPartial());
              break;
            }
            case 34: {
              SslPlanner.planner_vec3d.Builder subBuilder = SslPlanner.planner_vec3d.newBuilder();
              if (hasGoalState()) {
                subBuilder.mergeFrom(getGoalState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGoalState(subBuilder.buildPartial());
              break;
            }
            case 42: {
              SslPlanner.planner_vec3d.Builder subBuilder = SslPlanner.planner_vec3d.newBuilder();
              if (hasDesiredVel()) {
                subBuilder.mergeFrom(getDesiredVel());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDesiredVel(subBuilder.buildPartial());
              break;
            }
            case 50: {
              SslPlanner.planner_vec3d.Builder subBuilder = SslPlanner.planner_vec3d.newBuilder();
              if (hasAppliedVel()) {
                subBuilder.mergeFrom(getAppliedVel());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAppliedVel(subBuilder.buildPartial());
              break;
            }
            case 58: {
              SslPlanner.planner_obstacles.Builder subBuilder = SslPlanner.planner_obstacles.newBuilder();
              if (hasObstacleSet()) {
                subBuilder.mergeFrom(getObstacleSet());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setObstacleSet(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required uint32 id = 1;
      private int id_ ;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }
      
      // repeated .planner_vec3d pathState = 2;
      private java.util.List<SslPlanner.planner_vec3d> pathState_ =
        java.util.Collections.emptyList();
      private void ensurePathStateIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          pathState_ = new java.util.ArrayList<SslPlanner.planner_vec3d>(pathState_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> pathStateBuilder_;
      
      public java.util.List<SslPlanner.planner_vec3d> getPathStateList() {
        if (pathStateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pathState_);
        } else {
          return pathStateBuilder_.getMessageList();
        }
      }
      public int getPathStateCount() {
        if (pathStateBuilder_ == null) {
          return pathState_.size();
        } else {
          return pathStateBuilder_.getCount();
        }
      }
      public SslPlanner.planner_vec3d getPathState(int index) {
        if (pathStateBuilder_ == null) {
          return pathState_.get(index);
        } else {
          return pathStateBuilder_.getMessage(index);
        }
      }
      public Builder setPathState(
          int index, SslPlanner.planner_vec3d value) {
        if (pathStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathStateIsMutable();
          pathState_.set(index, value);
          onChanged();
        } else {
          pathStateBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setPathState(
          int index, SslPlanner.planner_vec3d.Builder builderForValue) {
        if (pathStateBuilder_ == null) {
          ensurePathStateIsMutable();
          pathState_.set(index, builderForValue.build());
          onChanged();
        } else {
          pathStateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addPathState(SslPlanner.planner_vec3d value) {
        if (pathStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathStateIsMutable();
          pathState_.add(value);
          onChanged();
        } else {
          pathStateBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addPathState(
          int index, SslPlanner.planner_vec3d value) {
        if (pathStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathStateIsMutable();
          pathState_.add(index, value);
          onChanged();
        } else {
          pathStateBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addPathState(
          SslPlanner.planner_vec3d.Builder builderForValue) {
        if (pathStateBuilder_ == null) {
          ensurePathStateIsMutable();
          pathState_.add(builderForValue.build());
          onChanged();
        } else {
          pathStateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addPathState(
          int index, SslPlanner.planner_vec3d.Builder builderForValue) {
        if (pathStateBuilder_ == null) {
          ensurePathStateIsMutable();
          pathState_.add(index, builderForValue.build());
          onChanged();
        } else {
          pathStateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllPathState(
          java.lang.Iterable<? extends SslPlanner.planner_vec3d> values) {
        if (pathStateBuilder_ == null) {
          ensurePathStateIsMutable();
          super.addAll(values, pathState_);
          onChanged();
        } else {
          pathStateBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearPathState() {
        if (pathStateBuilder_ == null) {
          pathState_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          pathStateBuilder_.clear();
        }
        return this;
      }
      public Builder removePathState(int index) {
        if (pathStateBuilder_ == null) {
          ensurePathStateIsMutable();
          pathState_.remove(index);
          onChanged();
        } else {
          pathStateBuilder_.remove(index);
        }
        return this;
      }
      public SslPlanner.planner_vec3d.Builder getPathStateBuilder(
          int index) {
        return getPathStateFieldBuilder().getBuilder(index);
      }
      public SslPlanner.planner_vec3dOrBuilder getPathStateOrBuilder(
          int index) {
        if (pathStateBuilder_ == null) {
          return pathState_.get(index);  } else {
          return pathStateBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends SslPlanner.planner_vec3dOrBuilder> 
           getPathStateOrBuilderList() {
        if (pathStateBuilder_ != null) {
          return pathStateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pathState_);
        }
      }
      public SslPlanner.planner_vec3d.Builder addPathStateBuilder() {
        return getPathStateFieldBuilder().addBuilder(
            SslPlanner.planner_vec3d.getDefaultInstance());
      }
      public SslPlanner.planner_vec3d.Builder addPathStateBuilder(
          int index) {
        return getPathStateFieldBuilder().addBuilder(
            index, SslPlanner.planner_vec3d.getDefaultInstance());
      }
      public java.util.List<SslPlanner.planner_vec3d.Builder> 
           getPathStateBuilderList() {
        return getPathStateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> 
          getPathStateFieldBuilder() {
        if (pathStateBuilder_ == null) {
          pathStateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder>(
                  pathState_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          pathState_ = null;
        }
        return pathStateBuilder_;
      }
      
      // required .planner_vec3d initState = 3;
      private SslPlanner.planner_vec3d initState_ = SslPlanner.planner_vec3d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> initStateBuilder_;
      public boolean hasInitState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public SslPlanner.planner_vec3d getInitState() {
        if (initStateBuilder_ == null) {
          return initState_;
        } else {
          return initStateBuilder_.getMessage();
        }
      }
      public Builder setInitState(SslPlanner.planner_vec3d value) {
        if (initStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initState_ = value;
          onChanged();
        } else {
          initStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setInitState(
          SslPlanner.planner_vec3d.Builder builderForValue) {
        if (initStateBuilder_ == null) {
          initState_ = builderForValue.build();
          onChanged();
        } else {
          initStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeInitState(SslPlanner.planner_vec3d value) {
        if (initStateBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              initState_ != SslPlanner.planner_vec3d.getDefaultInstance()) {
            initState_ =
              SslPlanner.planner_vec3d.newBuilder(initState_).mergeFrom(value).buildPartial();
          } else {
            initState_ = value;
          }
          onChanged();
        } else {
          initStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearInitState() {
        if (initStateBuilder_ == null) {
          initState_ = SslPlanner.planner_vec3d.getDefaultInstance();
          onChanged();
        } else {
          initStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public SslPlanner.planner_vec3d.Builder getInitStateBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getInitStateFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_vec3dOrBuilder getInitStateOrBuilder() {
        if (initStateBuilder_ != null) {
          return initStateBuilder_.getMessageOrBuilder();
        } else {
          return initState_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> 
          getInitStateFieldBuilder() {
        if (initStateBuilder_ == null) {
          initStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder>(
                  initState_,
                  getParentForChildren(),
                  isClean());
          initState_ = null;
        }
        return initStateBuilder_;
      }
      
      // required .planner_vec3d goalState = 4;
      private SslPlanner.planner_vec3d goalState_ = SslPlanner.planner_vec3d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> goalStateBuilder_;
      public boolean hasGoalState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public SslPlanner.planner_vec3d getGoalState() {
        if (goalStateBuilder_ == null) {
          return goalState_;
        } else {
          return goalStateBuilder_.getMessage();
        }
      }
      public Builder setGoalState(SslPlanner.planner_vec3d value) {
        if (goalStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          goalState_ = value;
          onChanged();
        } else {
          goalStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setGoalState(
          SslPlanner.planner_vec3d.Builder builderForValue) {
        if (goalStateBuilder_ == null) {
          goalState_ = builderForValue.build();
          onChanged();
        } else {
          goalStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeGoalState(SslPlanner.planner_vec3d value) {
        if (goalStateBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              goalState_ != SslPlanner.planner_vec3d.getDefaultInstance()) {
            goalState_ =
              SslPlanner.planner_vec3d.newBuilder(goalState_).mergeFrom(value).buildPartial();
          } else {
            goalState_ = value;
          }
          onChanged();
        } else {
          goalStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearGoalState() {
        if (goalStateBuilder_ == null) {
          goalState_ = SslPlanner.planner_vec3d.getDefaultInstance();
          onChanged();
        } else {
          goalStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public SslPlanner.planner_vec3d.Builder getGoalStateBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getGoalStateFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_vec3dOrBuilder getGoalStateOrBuilder() {
        if (goalStateBuilder_ != null) {
          return goalStateBuilder_.getMessageOrBuilder();
        } else {
          return goalState_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> 
          getGoalStateFieldBuilder() {
        if (goalStateBuilder_ == null) {
          goalStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder>(
                  goalState_,
                  getParentForChildren(),
                  isClean());
          goalState_ = null;
        }
        return goalStateBuilder_;
      }
      
      // required .planner_vec3d desiredVel = 5;
      private SslPlanner.planner_vec3d desiredVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> desiredVelBuilder_;
      public boolean hasDesiredVel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public SslPlanner.planner_vec3d getDesiredVel() {
        if (desiredVelBuilder_ == null) {
          return desiredVel_;
        } else {
          return desiredVelBuilder_.getMessage();
        }
      }
      public Builder setDesiredVel(SslPlanner.planner_vec3d value) {
        if (desiredVelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          desiredVel_ = value;
          onChanged();
        } else {
          desiredVelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setDesiredVel(
          SslPlanner.planner_vec3d.Builder builderForValue) {
        if (desiredVelBuilder_ == null) {
          desiredVel_ = builderForValue.build();
          onChanged();
        } else {
          desiredVelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergeDesiredVel(SslPlanner.planner_vec3d value) {
        if (desiredVelBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              desiredVel_ != SslPlanner.planner_vec3d.getDefaultInstance()) {
            desiredVel_ =
              SslPlanner.planner_vec3d.newBuilder(desiredVel_).mergeFrom(value).buildPartial();
          } else {
            desiredVel_ = value;
          }
          onChanged();
        } else {
          desiredVelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearDesiredVel() {
        if (desiredVelBuilder_ == null) {
          desiredVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
          onChanged();
        } else {
          desiredVelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      public SslPlanner.planner_vec3d.Builder getDesiredVelBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDesiredVelFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_vec3dOrBuilder getDesiredVelOrBuilder() {
        if (desiredVelBuilder_ != null) {
          return desiredVelBuilder_.getMessageOrBuilder();
        } else {
          return desiredVel_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> 
          getDesiredVelFieldBuilder() {
        if (desiredVelBuilder_ == null) {
          desiredVelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder>(
                  desiredVel_,
                  getParentForChildren(),
                  isClean());
          desiredVel_ = null;
        }
        return desiredVelBuilder_;
      }
      
      // required .planner_vec3d appliedVel = 6;
      private SslPlanner.planner_vec3d appliedVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> appliedVelBuilder_;
      public boolean hasAppliedVel() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public SslPlanner.planner_vec3d getAppliedVel() {
        if (appliedVelBuilder_ == null) {
          return appliedVel_;
        } else {
          return appliedVelBuilder_.getMessage();
        }
      }
      public Builder setAppliedVel(SslPlanner.planner_vec3d value) {
        if (appliedVelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          appliedVel_ = value;
          onChanged();
        } else {
          appliedVelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setAppliedVel(
          SslPlanner.planner_vec3d.Builder builderForValue) {
        if (appliedVelBuilder_ == null) {
          appliedVel_ = builderForValue.build();
          onChanged();
        } else {
          appliedVelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeAppliedVel(SslPlanner.planner_vec3d value) {
        if (appliedVelBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              appliedVel_ != SslPlanner.planner_vec3d.getDefaultInstance()) {
            appliedVel_ =
              SslPlanner.planner_vec3d.newBuilder(appliedVel_).mergeFrom(value).buildPartial();
          } else {
            appliedVel_ = value;
          }
          onChanged();
        } else {
          appliedVelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearAppliedVel() {
        if (appliedVelBuilder_ == null) {
          appliedVel_ = SslPlanner.planner_vec3d.getDefaultInstance();
          onChanged();
        } else {
          appliedVelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      public SslPlanner.planner_vec3d.Builder getAppliedVelBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getAppliedVelFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_vec3dOrBuilder getAppliedVelOrBuilder() {
        if (appliedVelBuilder_ != null) {
          return appliedVelBuilder_.getMessageOrBuilder();
        } else {
          return appliedVel_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder> 
          getAppliedVelFieldBuilder() {
        if (appliedVelBuilder_ == null) {
          appliedVelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_vec3d, SslPlanner.planner_vec3d.Builder, SslPlanner.planner_vec3dOrBuilder>(
                  appliedVel_,
                  getParentForChildren(),
                  isClean());
          appliedVel_ = null;
        }
        return appliedVelBuilder_;
      }
      
      // optional .planner_obstacles obstacleSet = 7;
      private SslPlanner.planner_obstacles obstacleSet_ = SslPlanner.planner_obstacles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_obstacles, SslPlanner.planner_obstacles.Builder, SslPlanner.planner_obstaclesOrBuilder> obstacleSetBuilder_;
      public boolean hasObstacleSet() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public SslPlanner.planner_obstacles getObstacleSet() {
        if (obstacleSetBuilder_ == null) {
          return obstacleSet_;
        } else {
          return obstacleSetBuilder_.getMessage();
        }
      }
      public Builder setObstacleSet(SslPlanner.planner_obstacles value) {
        if (obstacleSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          obstacleSet_ = value;
          onChanged();
        } else {
          obstacleSetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder setObstacleSet(
          SslPlanner.planner_obstacles.Builder builderForValue) {
        if (obstacleSetBuilder_ == null) {
          obstacleSet_ = builderForValue.build();
          onChanged();
        } else {
          obstacleSetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder mergeObstacleSet(SslPlanner.planner_obstacles value) {
        if (obstacleSetBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              obstacleSet_ != SslPlanner.planner_obstacles.getDefaultInstance()) {
            obstacleSet_ =
              SslPlanner.planner_obstacles.newBuilder(obstacleSet_).mergeFrom(value).buildPartial();
          } else {
            obstacleSet_ = value;
          }
          onChanged();
        } else {
          obstacleSetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder clearObstacleSet() {
        if (obstacleSetBuilder_ == null) {
          obstacleSet_ = SslPlanner.planner_obstacles.getDefaultInstance();
          onChanged();
        } else {
          obstacleSetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      public SslPlanner.planner_obstacles.Builder getObstacleSetBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getObstacleSetFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_obstaclesOrBuilder getObstacleSetOrBuilder() {
        if (obstacleSetBuilder_ != null) {
          return obstacleSetBuilder_.getMessageOrBuilder();
        } else {
          return obstacleSet_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_obstacles, SslPlanner.planner_obstacles.Builder, SslPlanner.planner_obstaclesOrBuilder> 
          getObstacleSetFieldBuilder() {
        if (obstacleSetBuilder_ == null) {
          obstacleSetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_obstacles, SslPlanner.planner_obstacles.Builder, SslPlanner.planner_obstaclesOrBuilder>(
                  obstacleSet_,
                  getParentForChildren(),
                  isClean());
          obstacleSet_ = null;
        }
        return obstacleSetBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:planner_plan)
    }
    
    static {
      defaultInstance = new planner_plan(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:planner_plan)
  }
  
  public interface ssl_planner_packetOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .planner_plan plans = 1;
    java.util.List<SslPlanner.planner_plan> 
        getPlansList();
    SslPlanner.planner_plan getPlans(int index);
    int getPlansCount();
    java.util.List<? extends SslPlanner.planner_planOrBuilder> 
        getPlansOrBuilderList();
    SslPlanner.planner_planOrBuilder getPlansOrBuilder(
        int index);
    
    // optional .planner_polygon plannerBound = 2;
    boolean hasPlannerBound();
    SslPlanner.planner_polygon getPlannerBound();
    SslPlanner.planner_polygonOrBuilder getPlannerBoundOrBuilder();
    
    // optional string comment = 3;
    boolean hasComment();
    String getComment();
  }
  public static final class ssl_planner_packet extends
      com.google.protobuf.GeneratedMessage
      implements ssl_planner_packetOrBuilder {
    // Use ssl_planner_packet.newBuilder() to construct.
    private ssl_planner_packet(Builder builder) {
      super(builder);
    }
    private ssl_planner_packet(boolean noInit) {}
    
    private static final ssl_planner_packet defaultInstance;
    public static ssl_planner_packet getDefaultInstance() {
      return defaultInstance;
    }
    
    public ssl_planner_packet getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslPlanner.internal_static_ssl_planner_packet_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslPlanner.internal_static_ssl_planner_packet_fieldAccessorTable;
    }
    
    private int bitField0_;
    // repeated .planner_plan plans = 1;
    public static final int PLANS_FIELD_NUMBER = 1;
    private java.util.List<SslPlanner.planner_plan> plans_;
    public java.util.List<SslPlanner.planner_plan> getPlansList() {
      return plans_;
    }
    public java.util.List<? extends SslPlanner.planner_planOrBuilder> 
        getPlansOrBuilderList() {
      return plans_;
    }
    public int getPlansCount() {
      return plans_.size();
    }
    public SslPlanner.planner_plan getPlans(int index) {
      return plans_.get(index);
    }
    public SslPlanner.planner_planOrBuilder getPlansOrBuilder(
        int index) {
      return plans_.get(index);
    }
    
    // optional .planner_polygon plannerBound = 2;
    public static final int PLANNERBOUND_FIELD_NUMBER = 2;
    private SslPlanner.planner_polygon plannerBound_;
    public boolean hasPlannerBound() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public SslPlanner.planner_polygon getPlannerBound() {
      return plannerBound_;
    }
    public SslPlanner.planner_polygonOrBuilder getPlannerBoundOrBuilder() {
      return plannerBound_;
    }
    
    // optional string comment = 3;
    public static final int COMMENT_FIELD_NUMBER = 3;
    private java.lang.Object comment_;
    public boolean hasComment() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getComment() {
      java.lang.Object ref = comment_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          comment_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getCommentBytes() {
      java.lang.Object ref = comment_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        comment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      plans_ = java.util.Collections.emptyList();
      plannerBound_ = SslPlanner.planner_polygon.getDefaultInstance();
      comment_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getPlansCount(); i++) {
        if (!getPlans(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPlannerBound()) {
        if (!getPlannerBound().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < plans_.size(); i++) {
        output.writeMessage(1, plans_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, plannerBound_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3, getCommentBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < plans_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, plans_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, plannerBound_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getCommentBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static SslPlanner.ssl_planner_packet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.ssl_planner_packet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SslPlanner.ssl_planner_packet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SslPlanner.ssl_planner_packet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SslPlanner.ssl_planner_packet prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SslPlanner.ssl_planner_packetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslPlanner.internal_static_ssl_planner_packet_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslPlanner.internal_static_ssl_planner_packet_fieldAccessorTable;
      }
      
      // Construct using SslPlanner.ssl_planner_packet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlansFieldBuilder();
          getPlannerBoundFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (plansBuilder_ == null) {
          plans_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          plansBuilder_.clear();
        }
        if (plannerBoundBuilder_ == null) {
          plannerBound_ = SslPlanner.planner_polygon.getDefaultInstance();
        } else {
          plannerBoundBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        comment_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslPlanner.ssl_planner_packet.getDescriptor();
      }
      
      public SslPlanner.ssl_planner_packet getDefaultInstanceForType() {
        return SslPlanner.ssl_planner_packet.getDefaultInstance();
      }
      
      public SslPlanner.ssl_planner_packet build() {
        SslPlanner.ssl_planner_packet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private SslPlanner.ssl_planner_packet buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        SslPlanner.ssl_planner_packet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public SslPlanner.ssl_planner_packet buildPartial() {
        SslPlanner.ssl_planner_packet result = new SslPlanner.ssl_planner_packet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (plansBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            plans_ = java.util.Collections.unmodifiableList(plans_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.plans_ = plans_;
        } else {
          result.plans_ = plansBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (plannerBoundBuilder_ == null) {
          result.plannerBound_ = plannerBound_;
        } else {
          result.plannerBound_ = plannerBoundBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.comment_ = comment_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SslPlanner.ssl_planner_packet) {
          return mergeFrom((SslPlanner.ssl_planner_packet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SslPlanner.ssl_planner_packet other) {
        if (other == SslPlanner.ssl_planner_packet.getDefaultInstance()) return this;
        if (plansBuilder_ == null) {
          if (!other.plans_.isEmpty()) {
            if (plans_.isEmpty()) {
              plans_ = other.plans_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePlansIsMutable();
              plans_.addAll(other.plans_);
            }
            onChanged();
          }
        } else {
          if (!other.plans_.isEmpty()) {
            if (plansBuilder_.isEmpty()) {
              plansBuilder_.dispose();
              plansBuilder_ = null;
              plans_ = other.plans_;
              bitField0_ = (bitField0_ & ~0x00000001);
              plansBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlansFieldBuilder() : null;
            } else {
              plansBuilder_.addAllMessages(other.plans_);
            }
          }
        }
        if (other.hasPlannerBound()) {
          mergePlannerBound(other.getPlannerBound());
        }
        if (other.hasComment()) {
          setComment(other.getComment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getPlansCount(); i++) {
          if (!getPlans(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasPlannerBound()) {
          if (!getPlannerBound().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              SslPlanner.planner_plan.Builder subBuilder = SslPlanner.planner_plan.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPlans(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SslPlanner.planner_polygon.Builder subBuilder = SslPlanner.planner_polygon.newBuilder();
              if (hasPlannerBound()) {
                subBuilder.mergeFrom(getPlannerBound());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPlannerBound(subBuilder.buildPartial());
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              comment_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .planner_plan plans = 1;
      private java.util.List<SslPlanner.planner_plan> plans_ =
        java.util.Collections.emptyList();
      private void ensurePlansIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          plans_ = new java.util.ArrayList<SslPlanner.planner_plan>(plans_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_plan, SslPlanner.planner_plan.Builder, SslPlanner.planner_planOrBuilder> plansBuilder_;
      
      public java.util.List<SslPlanner.planner_plan> getPlansList() {
        if (plansBuilder_ == null) {
          return java.util.Collections.unmodifiableList(plans_);
        } else {
          return plansBuilder_.getMessageList();
        }
      }
      public int getPlansCount() {
        if (plansBuilder_ == null) {
          return plans_.size();
        } else {
          return plansBuilder_.getCount();
        }
      }
      public SslPlanner.planner_plan getPlans(int index) {
        if (plansBuilder_ == null) {
          return plans_.get(index);
        } else {
          return plansBuilder_.getMessage(index);
        }
      }
      public Builder setPlans(
          int index, SslPlanner.planner_plan value) {
        if (plansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlansIsMutable();
          plans_.set(index, value);
          onChanged();
        } else {
          plansBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setPlans(
          int index, SslPlanner.planner_plan.Builder builderForValue) {
        if (plansBuilder_ == null) {
          ensurePlansIsMutable();
          plans_.set(index, builderForValue.build());
          onChanged();
        } else {
          plansBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addPlans(SslPlanner.planner_plan value) {
        if (plansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlansIsMutable();
          plans_.add(value);
          onChanged();
        } else {
          plansBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addPlans(
          int index, SslPlanner.planner_plan value) {
        if (plansBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlansIsMutable();
          plans_.add(index, value);
          onChanged();
        } else {
          plansBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addPlans(
          SslPlanner.planner_plan.Builder builderForValue) {
        if (plansBuilder_ == null) {
          ensurePlansIsMutable();
          plans_.add(builderForValue.build());
          onChanged();
        } else {
          plansBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addPlans(
          int index, SslPlanner.planner_plan.Builder builderForValue) {
        if (plansBuilder_ == null) {
          ensurePlansIsMutable();
          plans_.add(index, builderForValue.build());
          onChanged();
        } else {
          plansBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllPlans(
          java.lang.Iterable<? extends SslPlanner.planner_plan> values) {
        if (plansBuilder_ == null) {
          ensurePlansIsMutable();
          super.addAll(values, plans_);
          onChanged();
        } else {
          plansBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearPlans() {
        if (plansBuilder_ == null) {
          plans_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          plansBuilder_.clear();
        }
        return this;
      }
      public Builder removePlans(int index) {
        if (plansBuilder_ == null) {
          ensurePlansIsMutable();
          plans_.remove(index);
          onChanged();
        } else {
          plansBuilder_.remove(index);
        }
        return this;
      }
      public SslPlanner.planner_plan.Builder getPlansBuilder(
          int index) {
        return getPlansFieldBuilder().getBuilder(index);
      }
      public SslPlanner.planner_planOrBuilder getPlansOrBuilder(
          int index) {
        if (plansBuilder_ == null) {
          return plans_.get(index);  } else {
          return plansBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends SslPlanner.planner_planOrBuilder> 
           getPlansOrBuilderList() {
        if (plansBuilder_ != null) {
          return plansBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(plans_);
        }
      }
      public SslPlanner.planner_plan.Builder addPlansBuilder() {
        return getPlansFieldBuilder().addBuilder(
            SslPlanner.planner_plan.getDefaultInstance());
      }
      public SslPlanner.planner_plan.Builder addPlansBuilder(
          int index) {
        return getPlansFieldBuilder().addBuilder(
            index, SslPlanner.planner_plan.getDefaultInstance());
      }
      public java.util.List<SslPlanner.planner_plan.Builder> 
           getPlansBuilderList() {
        return getPlansFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SslPlanner.planner_plan, SslPlanner.planner_plan.Builder, SslPlanner.planner_planOrBuilder> 
          getPlansFieldBuilder() {
        if (plansBuilder_ == null) {
          plansBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SslPlanner.planner_plan, SslPlanner.planner_plan.Builder, SslPlanner.planner_planOrBuilder>(
                  plans_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          plans_ = null;
        }
        return plansBuilder_;
      }
      
      // optional .planner_polygon plannerBound = 2;
      private SslPlanner.planner_polygon plannerBound_ = SslPlanner.planner_polygon.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder> plannerBoundBuilder_;
      public boolean hasPlannerBound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public SslPlanner.planner_polygon getPlannerBound() {
        if (plannerBoundBuilder_ == null) {
          return plannerBound_;
        } else {
          return plannerBoundBuilder_.getMessage();
        }
      }
      public Builder setPlannerBound(SslPlanner.planner_polygon value) {
        if (plannerBoundBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          plannerBound_ = value;
          onChanged();
        } else {
          plannerBoundBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setPlannerBound(
          SslPlanner.planner_polygon.Builder builderForValue) {
        if (plannerBoundBuilder_ == null) {
          plannerBound_ = builderForValue.build();
          onChanged();
        } else {
          plannerBoundBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergePlannerBound(SslPlanner.planner_polygon value) {
        if (plannerBoundBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              plannerBound_ != SslPlanner.planner_polygon.getDefaultInstance()) {
            plannerBound_ =
              SslPlanner.planner_polygon.newBuilder(plannerBound_).mergeFrom(value).buildPartial();
          } else {
            plannerBound_ = value;
          }
          onChanged();
        } else {
          plannerBoundBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearPlannerBound() {
        if (plannerBoundBuilder_ == null) {
          plannerBound_ = SslPlanner.planner_polygon.getDefaultInstance();
          onChanged();
        } else {
          plannerBoundBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public SslPlanner.planner_polygon.Builder getPlannerBoundBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPlannerBoundFieldBuilder().getBuilder();
      }
      public SslPlanner.planner_polygonOrBuilder getPlannerBoundOrBuilder() {
        if (plannerBoundBuilder_ != null) {
          return plannerBoundBuilder_.getMessageOrBuilder();
        } else {
          return plannerBound_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder> 
          getPlannerBoundFieldBuilder() {
        if (plannerBoundBuilder_ == null) {
          plannerBoundBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SslPlanner.planner_polygon, SslPlanner.planner_polygon.Builder, SslPlanner.planner_polygonOrBuilder>(
                  plannerBound_,
                  getParentForChildren(),
                  isClean());
          plannerBound_ = null;
        }
        return plannerBoundBuilder_;
      }
      
      // optional string comment = 3;
      private java.lang.Object comment_ = "";
      public boolean hasComment() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public String getComment() {
        java.lang.Object ref = comment_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          comment_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setComment(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        comment_ = value;
        onChanged();
        return this;
      }
      public Builder clearComment() {
        bitField0_ = (bitField0_ & ~0x00000004);
        comment_ = getDefaultInstance().getComment();
        onChanged();
        return this;
      }
      void setComment(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000004;
        comment_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:ssl_planner_packet)
    }
    
    static {
      defaultInstance = new ssl_planner_packet(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ssl_planner_packet)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_vec3d_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_vec3d_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_point2d_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_point2d_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_circle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_circle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_polygon_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_polygon_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_obstacles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_obstacles_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_planner_plan_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_planner_plan_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ssl_planner_packet_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ssl_planner_packet_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021ssl_planner.proto\"3\n\rplanner_vec3d\022\t\n\001" +
      "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\014\n\004teta\030\003 \002(\002\"\'\n\017plan" +
      "ner_point2d\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"Q\n\016pla" +
      "nner_circle\022 \n\006center\030\001 \002(\0132\020.planner_po" +
      "int2d\022\016\n\006radius\030\002 \002(\002\022\r\n\005orien\030\003 \001(\002\"B\n\017" +
      "planner_polygon\022 \n\006vertex\030\001 \003(\0132\020.planne" +
      "r_point2d\022\r\n\005orien\030\002 \001(\002\"Y\n\021planner_obst" +
      "acles\022 \n\007circles\030\001 \003(\0132\017.planner_circle\022" +
      "\"\n\010polygons\030\002 \003(\0132\020.planner_polygon\"\364\001\n\014" +
      "planner_plan\022\n\n\002id\030\001 \002(\r\022!\n\tpathState\030\002 ",
      "\003(\0132\016.planner_vec3d\022!\n\tinitState\030\003 \002(\0132\016" +
      ".planner_vec3d\022!\n\tgoalState\030\004 \002(\0132\016.plan" +
      "ner_vec3d\022\"\n\ndesiredVel\030\005 \002(\0132\016.planner_" +
      "vec3d\022\"\n\nappliedVel\030\006 \002(\0132\016.planner_vec3" +
      "d\022\'\n\013obstacleSet\030\007 \001(\0132\022.planner_obstacl" +
      "es\"k\n\022ssl_planner_packet\022\034\n\005plans\030\001 \003(\0132" +
      "\r.planner_plan\022&\n\014plannerBound\030\002 \001(\0132\020.p" +
      "lanner_polygon\022\017\n\007comment\030\003 \001(\t"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_planner_vec3d_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_planner_vec3d_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_vec3d_descriptor,
              new java.lang.String[] { "X", "Y", "Teta", },
              SslPlanner.planner_vec3d.class,
              SslPlanner.planner_vec3d.Builder.class);
          internal_static_planner_point2d_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_planner_point2d_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_point2d_descriptor,
              new java.lang.String[] { "X", "Y", },
              SslPlanner.planner_point2d.class,
              SslPlanner.planner_point2d.Builder.class);
          internal_static_planner_circle_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_planner_circle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_circle_descriptor,
              new java.lang.String[] { "Center", "Radius", "Orien", },
              SslPlanner.planner_circle.class,
              SslPlanner.planner_circle.Builder.class);
          internal_static_planner_polygon_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_planner_polygon_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_polygon_descriptor,
              new java.lang.String[] { "Vertex", "Orien", },
              SslPlanner.planner_polygon.class,
              SslPlanner.planner_polygon.Builder.class);
          internal_static_planner_obstacles_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_planner_obstacles_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_obstacles_descriptor,
              new java.lang.String[] { "Circles", "Polygons", },
              SslPlanner.planner_obstacles.class,
              SslPlanner.planner_obstacles.Builder.class);
          internal_static_planner_plan_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_planner_plan_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_planner_plan_descriptor,
              new java.lang.String[] { "Id", "PathState", "InitState", "GoalState", "DesiredVel", "AppliedVel", "ObstacleSet", },
              SslPlanner.planner_plan.class,
              SslPlanner.planner_plan.Builder.class);
          internal_static_ssl_planner_packet_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_ssl_planner_packet_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ssl_planner_packet_descriptor,
              new java.lang.String[] { "Plans", "PlannerBound", "Comment", },
              SslPlanner.ssl_planner_packet.class,
              SslPlanner.ssl_planner_packet.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
