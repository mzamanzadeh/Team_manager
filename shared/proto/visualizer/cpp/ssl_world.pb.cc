// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ssl_world_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_world_packet_vector_3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_vector_3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_world_packet_Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_Ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_world_packet_Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_world_packet_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_Team_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ssl_world_packet_Side_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fworld_2eproto() {
  protobuf_AddDesc_ssl_5fworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_world.proto");
  GOOGLE_CHECK(file != NULL);
  ssl_world_packet_descriptor_ = file->message_type(0);
  static const int ssl_world_packet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, field_balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, blue_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, yellow_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, referee_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, comment_),
  };
  ssl_world_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_descriptor_,
      ssl_world_packet::default_instance_,
      ssl_world_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet));
  ssl_world_packet_vector_3d_descriptor_ = ssl_world_packet_descriptor_->nested_type(0);
  static const int ssl_world_packet_vector_3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_vector_3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_vector_3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_vector_3d, teta_),
  };
  ssl_world_packet_vector_3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_vector_3d_descriptor_,
      ssl_world_packet_vector_3d::default_instance_,
      ssl_world_packet_vector_3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_vector_3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_vector_3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet_vector_3d));
  ssl_world_packet_Ball_descriptor_ = ssl_world_packet_descriptor_->nested_type(1);
  static const int ssl_world_packet_Ball_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, displacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, velocity_raw_),
  };
  ssl_world_packet_Ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_Ball_descriptor_,
      ssl_world_packet_Ball::default_instance_,
      ssl_world_packet_Ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet_Ball));
  ssl_world_packet_Robot_descriptor_ = ssl_world_packet_descriptor_->nested_type(2);
  static const int ssl_world_packet_Robot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Robot, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Robot, velocity_),
  };
  ssl_world_packet_Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_Robot_descriptor_,
      ssl_world_packet_Robot::default_instance_,
      ssl_world_packet_Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet_Robot));
  ssl_world_packet_Team_descriptor_ = ssl_world_packet_descriptor_->nested_type(3);
  static const int ssl_world_packet_Team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Team, robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Team, side_),
  };
  ssl_world_packet_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_Team_descriptor_,
      ssl_world_packet_Team::default_instance_,
      ssl_world_packet_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet_Team));
  ssl_world_packet_Side_descriptor_ = ssl_world_packet_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_descriptor_, &ssl_world_packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_vector_3d_descriptor_, &ssl_world_packet_vector_3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_Ball_descriptor_, &ssl_world_packet_Ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_Robot_descriptor_, &ssl_world_packet_Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_Team_descriptor_, &ssl_world_packet_Team::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fworld_2eproto() {
  delete ssl_world_packet::default_instance_;
  delete ssl_world_packet_reflection_;
  delete ssl_world_packet_vector_3d::default_instance_;
  delete ssl_world_packet_vector_3d_reflection_;
  delete ssl_world_packet_Ball::default_instance_;
  delete ssl_world_packet_Ball_reflection_;
  delete ssl_world_packet_Robot::default_instance_;
  delete ssl_world_packet_Robot_reflection_;
  delete ssl_world_packet_Team::default_instance_;
  delete ssl_world_packet_Team_reflection_;
}

void protobuf_AddDesc_ssl_5fworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ssl_world.proto\"\354\005\n\020ssl_world_packet\022+"
    "\n\013field_balls\030\001 \003(\0132\026.ssl_world_packet.B"
    "all\022)\n\tblue_team\030\002 \002(\0132\026.ssl_world_packe"
    "t.Team\022+\n\013yellow_team\030\003 \002(\0132\026.ssl_world_"
    "packet.Team\022\025\n\rreferee_state\030\004 \002(\t\022\017\n\007co"
    "mment\030\005 \001(\t\032/\n\tvector_3d\022\t\n\001x\030\001 \002(\002\022\t\n\001y"
    "\030\002 \002(\002\022\014\n\004teta\030\003 \002(\002\032\211\002\n\004Ball\022\n\n\002id\030\001 \002("
    "\r\022-\n\010position\030\002 \002(\0132\033.ssl_world_packet.v"
    "ector_3d\022-\n\010velocity\030\003 \002(\0132\033.ssl_world_p"
    "acket.vector_3d\0221\n\014acceleration\030\004 \002(\0132\033."
    "ssl_world_packet.vector_3d\0221\n\014displaceme"
    "nt\030\005 \001(\0132\033.ssl_world_packet.vector_3d\0221\n"
    "\014velocity_raw\030\006 \001(\0132\033.ssl_world_packet.v"
    "ector_3d\032q\n\005Robot\022\n\n\002id\030\001 \002(\r\022-\n\010positio"
    "n\030\002 \002(\0132\033.ssl_world_packet.vector_3d\022-\n\010"
    "velocity\030\003 \002(\0132\033.ssl_world_packet.vector"
    "_3d\032U\n\004Team\022\'\n\006robots\030\001 \003(\0132\027.ssl_world_"
    "packet.Robot\022$\n\004side\030\002 \002(\0162\026.ssl_world_p"
    "acket.Side\"$\n\004Side\022\021\n\004left\020\377\377\377\377\377\377\377\377\377\001\022\t\n"
    "\005right\020\001", 768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_world.proto", &protobuf_RegisterTypes);
  ssl_world_packet::default_instance_ = new ssl_world_packet();
  ssl_world_packet_vector_3d::default_instance_ = new ssl_world_packet_vector_3d();
  ssl_world_packet_Ball::default_instance_ = new ssl_world_packet_Ball();
  ssl_world_packet_Robot::default_instance_ = new ssl_world_packet_Robot();
  ssl_world_packet_Team::default_instance_ = new ssl_world_packet_Team();
  ssl_world_packet::default_instance_->InitAsDefaultInstance();
  ssl_world_packet_vector_3d::default_instance_->InitAsDefaultInstance();
  ssl_world_packet_Ball::default_instance_->InitAsDefaultInstance();
  ssl_world_packet_Robot::default_instance_->InitAsDefaultInstance();
  ssl_world_packet_Team::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fworld_2eproto {
  StaticDescriptorInitializer_ssl_5fworld_2eproto() {
    protobuf_AddDesc_ssl_5fworld_2eproto();
  }
} static_descriptor_initializer_ssl_5fworld_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ssl_world_packet_Side_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_Side_descriptor_;
}
bool ssl_world_packet_Side_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ssl_world_packet_Side ssl_world_packet::left;
const ssl_world_packet_Side ssl_world_packet::right;
const ssl_world_packet_Side ssl_world_packet::Side_MIN;
const ssl_world_packet_Side ssl_world_packet::Side_MAX;
const int ssl_world_packet::Side_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ssl_world_packet_vector_3d::kXFieldNumber;
const int ssl_world_packet_vector_3d::kYFieldNumber;
const int ssl_world_packet_vector_3d::kTetaFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet_vector_3d::ssl_world_packet_vector_3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet_vector_3d::InitAsDefaultInstance() {
}

ssl_world_packet_vector_3d::ssl_world_packet_vector_3d(const ssl_world_packet_vector_3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet_vector_3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  teta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet_vector_3d::~ssl_world_packet_vector_3d() {
  SharedDtor();
}

void ssl_world_packet_vector_3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ssl_world_packet_vector_3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet_vector_3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_vector_3d_descriptor_;
}

const ssl_world_packet_vector_3d& ssl_world_packet_vector_3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet_vector_3d* ssl_world_packet_vector_3d::default_instance_ = NULL;

ssl_world_packet_vector_3d* ssl_world_packet_vector_3d::New() const {
  return new ssl_world_packet_vector_3d;
}

void ssl_world_packet_vector_3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    teta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet_vector_3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_teta;
        break;
      }
      
      // required float teta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_teta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teta_)));
          set_has_teta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet_vector_3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->teta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet_vector_3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->teta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet_vector_3d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float teta = 3;
    if (has_teta()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet_vector_3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet_vector_3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet_vector_3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet_vector_3d::MergeFrom(const ssl_world_packet_vector_3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_teta()) {
      set_teta(from.teta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet_vector_3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet_vector_3d::CopyFrom(const ssl_world_packet_vector_3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet_vector_3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ssl_world_packet_vector_3d::Swap(ssl_world_packet_vector_3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(teta_, other->teta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet_vector_3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_vector_3d_descriptor_;
  metadata.reflection = ssl_world_packet_vector_3d_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ssl_world_packet_Ball::kIdFieldNumber;
const int ssl_world_packet_Ball::kPositionFieldNumber;
const int ssl_world_packet_Ball::kVelocityFieldNumber;
const int ssl_world_packet_Ball::kAccelerationFieldNumber;
const int ssl_world_packet_Ball::kDisplacementFieldNumber;
const int ssl_world_packet_Ball::kVelocityRawFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet_Ball::ssl_world_packet_Ball()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet_Ball::InitAsDefaultInstance() {
  position_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
  velocity_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
  acceleration_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
  displacement_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
  velocity_raw_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
}

ssl_world_packet_Ball::ssl_world_packet_Ball(const ssl_world_packet_Ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet_Ball::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  velocity_ = NULL;
  acceleration_ = NULL;
  displacement_ = NULL;
  velocity_raw_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet_Ball::~ssl_world_packet_Ball() {
  SharedDtor();
}

void ssl_world_packet_Ball::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
    delete acceleration_;
    delete displacement_;
    delete velocity_raw_;
  }
}

void ssl_world_packet_Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet_Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_Ball_descriptor_;
}

const ssl_world_packet_Ball& ssl_world_packet_Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet_Ball* ssl_world_packet_Ball::default_instance_ = NULL;

ssl_world_packet_Ball* ssl_world_packet_Ball::New() const {
  return new ssl_world_packet_Ball;
}

void ssl_world_packet_Ball::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::ssl_world_packet_vector_3d::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::ssl_world_packet_vector_3d::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::ssl_world_packet_vector_3d::Clear();
    }
    if (has_displacement()) {
      if (displacement_ != NULL) displacement_->::ssl_world_packet_vector_3d::Clear();
    }
    if (has_velocity_raw()) {
      if (velocity_raw_ != NULL) velocity_raw_->::ssl_world_packet_vector_3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet_Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .ssl_world_packet.vector_3d position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }
      
      // required .ssl_world_packet.vector_3d velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acceleration;
        break;
      }
      
      // required .ssl_world_packet.vector_3d acceleration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_displacement;
        break;
      }
      
      // optional .ssl_world_packet.vector_3d displacement = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displacement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_displacement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_velocity_raw;
        break;
      }
      
      // optional .ssl_world_packet.vector_3d velocity_raw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet_Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .ssl_world_packet.vector_3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }
  
  // required .ssl_world_packet.vector_3d acceleration = 4;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acceleration(), output);
  }
  
  // optional .ssl_world_packet.vector_3d displacement = 5;
  if (has_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->displacement(), output);
  }
  
  // optional .ssl_world_packet.vector_3d velocity_raw = 6;
  if (has_velocity_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->velocity_raw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet_Ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .ssl_world_packet.vector_3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }
  
  // required .ssl_world_packet.vector_3d acceleration = 4;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acceleration(), target);
  }
  
  // optional .ssl_world_packet.vector_3d displacement = 5;
  if (has_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->displacement(), target);
  }
  
  // optional .ssl_world_packet.vector_3d velocity_raw = 6;
  if (has_velocity_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->velocity_raw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet_Ball::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .ssl_world_packet.vector_3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .ssl_world_packet.vector_3d velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }
    
    // required .ssl_world_packet.vector_3d acceleration = 4;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }
    
    // optional .ssl_world_packet.vector_3d displacement = 5;
    if (has_displacement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->displacement());
    }
    
    // optional .ssl_world_packet.vector_3d velocity_raw = 6;
    if (has_velocity_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity_raw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet_Ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet_Ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet_Ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet_Ball::MergeFrom(const ssl_world_packet_Ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::ssl_world_packet_vector_3d::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::ssl_world_packet_vector_3d::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::ssl_world_packet_vector_3d::MergeFrom(from.acceleration());
    }
    if (from.has_displacement()) {
      mutable_displacement()->::ssl_world_packet_vector_3d::MergeFrom(from.displacement());
    }
    if (from.has_velocity_raw()) {
      mutable_velocity_raw()->::ssl_world_packet_vector_3d::MergeFrom(from.velocity_raw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet_Ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet_Ball::CopyFrom(const ssl_world_packet_Ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet_Ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration().IsInitialized()) return false;
  }
  if (has_displacement()) {
    if (!this->displacement().IsInitialized()) return false;
  }
  if (has_velocity_raw()) {
    if (!this->velocity_raw().IsInitialized()) return false;
  }
  return true;
}

void ssl_world_packet_Ball::Swap(ssl_world_packet_Ball* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(displacement_, other->displacement_);
    std::swap(velocity_raw_, other->velocity_raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet_Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_Ball_descriptor_;
  metadata.reflection = ssl_world_packet_Ball_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ssl_world_packet_Robot::kIdFieldNumber;
const int ssl_world_packet_Robot::kPositionFieldNumber;
const int ssl_world_packet_Robot::kVelocityFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet_Robot::ssl_world_packet_Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet_Robot::InitAsDefaultInstance() {
  position_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
  velocity_ = const_cast< ::ssl_world_packet_vector_3d*>(&::ssl_world_packet_vector_3d::default_instance());
}

ssl_world_packet_Robot::ssl_world_packet_Robot(const ssl_world_packet_Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet_Robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet_Robot::~ssl_world_packet_Robot() {
  SharedDtor();
}

void ssl_world_packet_Robot::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void ssl_world_packet_Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet_Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_Robot_descriptor_;
}

const ssl_world_packet_Robot& ssl_world_packet_Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet_Robot* ssl_world_packet_Robot::default_instance_ = NULL;

ssl_world_packet_Robot* ssl_world_packet_Robot::New() const {
  return new ssl_world_packet_Robot;
}

void ssl_world_packet_Robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::ssl_world_packet_vector_3d::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::ssl_world_packet_vector_3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet_Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .ssl_world_packet.vector_3d position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }
      
      // required .ssl_world_packet.vector_3d velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet_Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .ssl_world_packet.vector_3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet_Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .ssl_world_packet.vector_3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet_Robot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .ssl_world_packet.vector_3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .ssl_world_packet.vector_3d velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet_Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet_Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet_Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet_Robot::MergeFrom(const ssl_world_packet_Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::ssl_world_packet_vector_3d::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::ssl_world_packet_vector_3d::MergeFrom(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet_Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet_Robot::CopyFrom(const ssl_world_packet_Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet_Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void ssl_world_packet_Robot::Swap(ssl_world_packet_Robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet_Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_Robot_descriptor_;
  metadata.reflection = ssl_world_packet_Robot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ssl_world_packet_Team::kRobotsFieldNumber;
const int ssl_world_packet_Team::kSideFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet_Team::ssl_world_packet_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet_Team::InitAsDefaultInstance() {
}

ssl_world_packet_Team::ssl_world_packet_Team(const ssl_world_packet_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet_Team::SharedCtor() {
  _cached_size_ = 0;
  side_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet_Team::~ssl_world_packet_Team() {
  SharedDtor();
}

void ssl_world_packet_Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ssl_world_packet_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_Team_descriptor_;
}

const ssl_world_packet_Team& ssl_world_packet_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet_Team* ssl_world_packet_Team::default_instance_ = NULL;

ssl_world_packet_Team* ssl_world_packet_Team::New() const {
  return new ssl_world_packet_Team;
}

void ssl_world_packet_Team::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    side_ = -1;
  }
  robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssl_world_packet.Robot robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robots;
        if (input->ExpectTag(16)) goto parse_side;
        break;
      }
      
      // required .ssl_world_packet.Side side = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_world_packet_Side_IsValid(value)) {
            set_side(static_cast< ::ssl_world_packet_Side >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ssl_world_packet.Robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots(i), output);
  }
  
  // required .ssl_world_packet.Side side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ssl_world_packet.Robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots(i), target);
  }
  
  // required .ssl_world_packet.Side side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet_Team::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ssl_world_packet.Side side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
  }
  // repeated .ssl_world_packet.Robot robots = 1;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet_Team::MergeFrom(const ssl_world_packet_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_.MergeFrom(from.robots_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet_Team::CopyFrom(const ssl_world_packet_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet_Team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < robots_size(); i++) {
    if (!this->robots(i).IsInitialized()) return false;
  }
  return true;
}

void ssl_world_packet_Team::Swap(ssl_world_packet_Team* other) {
  if (other != this) {
    robots_.Swap(&other->robots_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_Team_descriptor_;
  metadata.reflection = ssl_world_packet_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ssl_world_packet::kFieldBallsFieldNumber;
const int ssl_world_packet::kBlueTeamFieldNumber;
const int ssl_world_packet::kYellowTeamFieldNumber;
const int ssl_world_packet::kRefereeStateFieldNumber;
const int ssl_world_packet::kCommentFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet::ssl_world_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet::InitAsDefaultInstance() {
  blue_team_ = const_cast< ::ssl_world_packet_Team*>(&::ssl_world_packet_Team::default_instance());
  yellow_team_ = const_cast< ::ssl_world_packet_Team*>(&::ssl_world_packet_Team::default_instance());
}

ssl_world_packet::ssl_world_packet(const ssl_world_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet::SharedCtor() {
  _cached_size_ = 0;
  blue_team_ = NULL;
  yellow_team_ = NULL;
  referee_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet::~ssl_world_packet() {
  SharedDtor();
}

void ssl_world_packet::SharedDtor() {
  if (referee_state_ != &::google::protobuf::internal::kEmptyString) {
    delete referee_state_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete blue_team_;
    delete yellow_team_;
  }
}

void ssl_world_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_descriptor_;
}

const ssl_world_packet& ssl_world_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet* ssl_world_packet::default_instance_ = NULL;

ssl_world_packet* ssl_world_packet::New() const {
  return new ssl_world_packet;
}

void ssl_world_packet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_blue_team()) {
      if (blue_team_ != NULL) blue_team_->::ssl_world_packet_Team::Clear();
    }
    if (has_yellow_team()) {
      if (yellow_team_ != NULL) yellow_team_->::ssl_world_packet_Team::Clear();
    }
    if (has_referee_state()) {
      if (referee_state_ != &::google::protobuf::internal::kEmptyString) {
        referee_state_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  field_balls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssl_world_packet.Ball field_balls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_field_balls;
        if (input->ExpectTag(18)) goto parse_blue_team;
        break;
      }
      
      // required .ssl_world_packet.Team blue_team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yellow_team;
        break;
      }
      
      // required .ssl_world_packet.Team yellow_team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yellow_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_referee_state;
        break;
      }
      
      // required string referee_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referee_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referee_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->referee_state().data(), this->referee_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }
      
      // optional string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ssl_world_packet.Ball field_balls = 1;
  for (int i = 0; i < this->field_balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field_balls(i), output);
  }
  
  // required .ssl_world_packet.Team blue_team = 2;
  if (has_blue_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue_team(), output);
  }
  
  // required .ssl_world_packet.Team yellow_team = 3;
  if (has_yellow_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yellow_team(), output);
  }
  
  // required string referee_state = 4;
  if (has_referee_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->referee_state().data(), this->referee_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->referee_state(), output);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ssl_world_packet.Ball field_balls = 1;
  for (int i = 0; i < this->field_balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field_balls(i), target);
  }
  
  // required .ssl_world_packet.Team blue_team = 2;
  if (has_blue_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue_team(), target);
  }
  
  // required .ssl_world_packet.Team yellow_team = 3;
  if (has_yellow_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->yellow_team(), target);
  }
  
  // required string referee_state = 4;
  if (has_referee_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->referee_state().data(), this->referee_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->referee_state(), target);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ssl_world_packet.Team blue_team = 2;
    if (has_blue_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blue_team());
    }
    
    // required .ssl_world_packet.Team yellow_team = 3;
    if (has_yellow_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yellow_team());
    }
    
    // required string referee_state = 4;
    if (has_referee_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referee_state());
    }
    
    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  // repeated .ssl_world_packet.Ball field_balls = 1;
  total_size += 1 * this->field_balls_size();
  for (int i = 0; i < this->field_balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_balls(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet::MergeFrom(const ssl_world_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_balls_.MergeFrom(from.field_balls_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_blue_team()) {
      mutable_blue_team()->::ssl_world_packet_Team::MergeFrom(from.blue_team());
    }
    if (from.has_yellow_team()) {
      mutable_yellow_team()->::ssl_world_packet_Team::MergeFrom(from.yellow_team());
    }
    if (from.has_referee_state()) {
      set_referee_state(from.referee_state());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet::CopyFrom(const ssl_world_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < field_balls_size(); i++) {
    if (!this->field_balls(i).IsInitialized()) return false;
  }
  if (has_blue_team()) {
    if (!this->blue_team().IsInitialized()) return false;
  }
  if (has_yellow_team()) {
    if (!this->yellow_team().IsInitialized()) return false;
  }
  return true;
}

void ssl_world_packet::Swap(ssl_world_packet* other) {
  if (other != this) {
    field_balls_.Swap(&other->field_balls_);
    std::swap(blue_team_, other->blue_team_);
    std::swap(yellow_team_, other->yellow_team_);
    std::swap(referee_state_, other->referee_state_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_descriptor_;
  metadata.reflection = ssl_world_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
