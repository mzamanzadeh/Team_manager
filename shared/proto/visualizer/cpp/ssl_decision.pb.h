// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_decision.proto

#ifndef PROTOBUF_ssl_5fdecision_2eproto__INCLUDED
#define PROTOBUF_ssl_5fdecision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssl_5fdecision_2eproto();
void protobuf_AssignDesc_ssl_5fdecision_2eproto();
void protobuf_ShutdownFile_ssl_5fdecision_2eproto();

class ssl_decision_packet;
class ssl_decision_packet_Robot_Role;

enum ssl_decision_packet_Color {
  ssl_decision_packet_Color_blue = 0,
  ssl_decision_packet_Color_yellow = 1
};
bool ssl_decision_packet_Color_IsValid(int value);
const ssl_decision_packet_Color ssl_decision_packet_Color_Color_MIN = ssl_decision_packet_Color_blue;
const ssl_decision_packet_Color ssl_decision_packet_Color_Color_MAX = ssl_decision_packet_Color_yellow;
const int ssl_decision_packet_Color_Color_ARRAYSIZE = ssl_decision_packet_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* ssl_decision_packet_Color_descriptor();
inline const ::std::string& ssl_decision_packet_Color_Name(ssl_decision_packet_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    ssl_decision_packet_Color_descriptor(), value);
}
inline bool ssl_decision_packet_Color_Parse(
    const ::std::string& name, ssl_decision_packet_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ssl_decision_packet_Color>(
    ssl_decision_packet_Color_descriptor(), name, value);
}
enum ssl_decision_packet_Side {
  ssl_decision_packet_Side_left = -1,
  ssl_decision_packet_Side_right = 1
};
bool ssl_decision_packet_Side_IsValid(int value);
const ssl_decision_packet_Side ssl_decision_packet_Side_Side_MIN = ssl_decision_packet_Side_left;
const ssl_decision_packet_Side ssl_decision_packet_Side_Side_MAX = ssl_decision_packet_Side_right;
const int ssl_decision_packet_Side_Side_ARRAYSIZE = ssl_decision_packet_Side_Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* ssl_decision_packet_Side_descriptor();
inline const ::std::string& ssl_decision_packet_Side_Name(ssl_decision_packet_Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    ssl_decision_packet_Side_descriptor(), value);
}
inline bool ssl_decision_packet_Side_Parse(
    const ::std::string& name, ssl_decision_packet_Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ssl_decision_packet_Side>(
    ssl_decision_packet_Side_descriptor(), name, value);
}
// ===================================================================

class ssl_decision_packet_Robot_Role : public ::google::protobuf::Message {
 public:
  ssl_decision_packet_Robot_Role();
  virtual ~ssl_decision_packet_Robot_Role();
  
  ssl_decision_packet_Robot_Role(const ssl_decision_packet_Robot_Role& from);
  
  inline ssl_decision_packet_Robot_Role& operator=(const ssl_decision_packet_Robot_Role& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_decision_packet_Robot_Role& default_instance();
  
  void Swap(ssl_decision_packet_Robot_Role* other);
  
  // implements Message ----------------------------------------------
  
  ssl_decision_packet_Robot_Role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_decision_packet_Robot_Role& from);
  void MergeFrom(const ssl_decision_packet_Robot_Role& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 robot_id = 1;
  inline bool has_robot_id() const;
  inline void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 robot_id() const;
  inline void set_robot_id(::google::protobuf::uint32 value);
  
  // required string current_role = 2;
  inline bool has_current_role() const;
  inline void clear_current_role();
  static const int kCurrentRoleFieldNumber = 2;
  inline const ::std::string& current_role() const;
  inline void set_current_role(const ::std::string& value);
  inline void set_current_role(const char* value);
  inline void set_current_role(const char* value, size_t size);
  inline ::std::string* mutable_current_role();
  inline ::std::string* release_current_role();
  
  // required string current_skill = 3;
  inline bool has_current_skill() const;
  inline void clear_current_skill();
  static const int kCurrentSkillFieldNumber = 3;
  inline const ::std::string& current_skill() const;
  inline void set_current_skill(const ::std::string& value);
  inline void set_current_skill(const char* value);
  inline void set_current_skill(const char* value, size_t size);
  inline ::std::string* mutable_current_skill();
  inline ::std::string* release_current_skill();
  
  // @@protoc_insertion_point(class_scope:ssl_decision_packet.Robot_Role)
 private:
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_current_role();
  inline void clear_has_current_role();
  inline void set_has_current_skill();
  inline void clear_has_current_skill();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* current_role_;
  ::std::string* current_skill_;
  ::google::protobuf::uint32 robot_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fdecision_2eproto();
  friend void protobuf_AssignDesc_ssl_5fdecision_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fdecision_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_decision_packet_Robot_Role* default_instance_;
};
// -------------------------------------------------------------------

class ssl_decision_packet : public ::google::protobuf::Message {
 public:
  ssl_decision_packet();
  virtual ~ssl_decision_packet();
  
  ssl_decision_packet(const ssl_decision_packet& from);
  
  inline ssl_decision_packet& operator=(const ssl_decision_packet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_decision_packet& default_instance();
  
  void Swap(ssl_decision_packet* other);
  
  // implements Message ----------------------------------------------
  
  ssl_decision_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_decision_packet& from);
  void MergeFrom(const ssl_decision_packet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ssl_decision_packet_Robot_Role Robot_Role;
  
  typedef ssl_decision_packet_Color Color;
  static const Color blue = ssl_decision_packet_Color_blue;
  static const Color yellow = ssl_decision_packet_Color_yellow;
  static inline bool Color_IsValid(int value) {
    return ssl_decision_packet_Color_IsValid(value);
  }
  static const Color Color_MIN =
    ssl_decision_packet_Color_Color_MIN;
  static const Color Color_MAX =
    ssl_decision_packet_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    ssl_decision_packet_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return ssl_decision_packet_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return ssl_decision_packet_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return ssl_decision_packet_Color_Parse(name, value);
  }
  
  typedef ssl_decision_packet_Side Side;
  static const Side left = ssl_decision_packet_Side_left;
  static const Side right = ssl_decision_packet_Side_right;
  static inline bool Side_IsValid(int value) {
    return ssl_decision_packet_Side_IsValid(value);
  }
  static const Side Side_MIN =
    ssl_decision_packet_Side_Side_MIN;
  static const Side Side_MAX =
    ssl_decision_packet_Side_Side_MAX;
  static const int Side_ARRAYSIZE =
    ssl_decision_packet_Side_Side_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Side_descriptor() {
    return ssl_decision_packet_Side_descriptor();
  }
  static inline const ::std::string& Side_Name(Side value) {
    return ssl_decision_packet_Side_Name(value);
  }
  static inline bool Side_Parse(const ::std::string& name,
      Side* value) {
    return ssl_decision_packet_Side_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ssl_decision_packet.Color our_color = 1;
  inline bool has_our_color() const;
  inline void clear_our_color();
  static const int kOurColorFieldNumber = 1;
  inline ::ssl_decision_packet_Color our_color() const;
  inline void set_our_color(::ssl_decision_packet_Color value);
  
  // required .ssl_decision_packet.Side our_side = 2;
  inline bool has_our_side() const;
  inline void clear_our_side();
  static const int kOurSideFieldNumber = 2;
  inline ::ssl_decision_packet_Side our_side() const;
  inline void set_our_side(::ssl_decision_packet_Side value);
  
  // required string strategy_name = 3;
  inline bool has_strategy_name() const;
  inline void clear_strategy_name();
  static const int kStrategyNameFieldNumber = 3;
  inline const ::std::string& strategy_name() const;
  inline void set_strategy_name(const ::std::string& value);
  inline void set_strategy_name(const char* value);
  inline void set_strategy_name(const char* value, size_t size);
  inline ::std::string* mutable_strategy_name();
  inline ::std::string* release_strategy_name();
  
  // repeated .ssl_decision_packet.Robot_Role robot_roles = 4;
  inline int robot_roles_size() const;
  inline void clear_robot_roles();
  static const int kRobotRolesFieldNumber = 4;
  inline const ::ssl_decision_packet_Robot_Role& robot_roles(int index) const;
  inline ::ssl_decision_packet_Robot_Role* mutable_robot_roles(int index);
  inline ::ssl_decision_packet_Robot_Role* add_robot_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::ssl_decision_packet_Robot_Role >&
      robot_roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssl_decision_packet_Robot_Role >*
      mutable_robot_roles();
  
  // optional string comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  
  // @@protoc_insertion_point(class_scope:ssl_decision_packet)
 private:
  inline void set_has_our_color();
  inline void clear_has_our_color();
  inline void set_has_our_side();
  inline void clear_has_our_side();
  inline void set_has_strategy_name();
  inline void clear_has_strategy_name();
  inline void set_has_comment();
  inline void clear_has_comment();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int our_color_;
  int our_side_;
  ::std::string* strategy_name_;
  ::google::protobuf::RepeatedPtrField< ::ssl_decision_packet_Robot_Role > robot_roles_;
  ::std::string* comment_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fdecision_2eproto();
  friend void protobuf_AssignDesc_ssl_5fdecision_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fdecision_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_decision_packet* default_instance_;
};
// ===================================================================


// ===================================================================

// ssl_decision_packet_Robot_Role

// required uint32 robot_id = 1;
inline bool ssl_decision_packet_Robot_Role::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_decision_packet_Robot_Role::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_decision_packet_Robot_Role::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_decision_packet_Robot_Role::clear_robot_id() {
  robot_id_ = 0u;
  clear_has_robot_id();
}
inline ::google::protobuf::uint32 ssl_decision_packet_Robot_Role::robot_id() const {
  return robot_id_;
}
inline void ssl_decision_packet_Robot_Role::set_robot_id(::google::protobuf::uint32 value) {
  set_has_robot_id();
  robot_id_ = value;
}

// required string current_role = 2;
inline bool ssl_decision_packet_Robot_Role::has_current_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_decision_packet_Robot_Role::set_has_current_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_decision_packet_Robot_Role::clear_has_current_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_decision_packet_Robot_Role::clear_current_role() {
  if (current_role_ != &::google::protobuf::internal::kEmptyString) {
    current_role_->clear();
  }
  clear_has_current_role();
}
inline const ::std::string& ssl_decision_packet_Robot_Role::current_role() const {
  return *current_role_;
}
inline void ssl_decision_packet_Robot_Role::set_current_role(const ::std::string& value) {
  set_has_current_role();
  if (current_role_ == &::google::protobuf::internal::kEmptyString) {
    current_role_ = new ::std::string;
  }
  current_role_->assign(value);
}
inline void ssl_decision_packet_Robot_Role::set_current_role(const char* value) {
  set_has_current_role();
  if (current_role_ == &::google::protobuf::internal::kEmptyString) {
    current_role_ = new ::std::string;
  }
  current_role_->assign(value);
}
inline void ssl_decision_packet_Robot_Role::set_current_role(const char* value, size_t size) {
  set_has_current_role();
  if (current_role_ == &::google::protobuf::internal::kEmptyString) {
    current_role_ = new ::std::string;
  }
  current_role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_decision_packet_Robot_Role::mutable_current_role() {
  set_has_current_role();
  if (current_role_ == &::google::protobuf::internal::kEmptyString) {
    current_role_ = new ::std::string;
  }
  return current_role_;
}
inline ::std::string* ssl_decision_packet_Robot_Role::release_current_role() {
  clear_has_current_role();
  if (current_role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_role_;
    current_role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string current_skill = 3;
inline bool ssl_decision_packet_Robot_Role::has_current_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_decision_packet_Robot_Role::set_has_current_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_decision_packet_Robot_Role::clear_has_current_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_decision_packet_Robot_Role::clear_current_skill() {
  if (current_skill_ != &::google::protobuf::internal::kEmptyString) {
    current_skill_->clear();
  }
  clear_has_current_skill();
}
inline const ::std::string& ssl_decision_packet_Robot_Role::current_skill() const {
  return *current_skill_;
}
inline void ssl_decision_packet_Robot_Role::set_current_skill(const ::std::string& value) {
  set_has_current_skill();
  if (current_skill_ == &::google::protobuf::internal::kEmptyString) {
    current_skill_ = new ::std::string;
  }
  current_skill_->assign(value);
}
inline void ssl_decision_packet_Robot_Role::set_current_skill(const char* value) {
  set_has_current_skill();
  if (current_skill_ == &::google::protobuf::internal::kEmptyString) {
    current_skill_ = new ::std::string;
  }
  current_skill_->assign(value);
}
inline void ssl_decision_packet_Robot_Role::set_current_skill(const char* value, size_t size) {
  set_has_current_skill();
  if (current_skill_ == &::google::protobuf::internal::kEmptyString) {
    current_skill_ = new ::std::string;
  }
  current_skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_decision_packet_Robot_Role::mutable_current_skill() {
  set_has_current_skill();
  if (current_skill_ == &::google::protobuf::internal::kEmptyString) {
    current_skill_ = new ::std::string;
  }
  return current_skill_;
}
inline ::std::string* ssl_decision_packet_Robot_Role::release_current_skill() {
  clear_has_current_skill();
  if (current_skill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_skill_;
    current_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ssl_decision_packet

// required .ssl_decision_packet.Color our_color = 1;
inline bool ssl_decision_packet::has_our_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_decision_packet::set_has_our_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_decision_packet::clear_has_our_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_decision_packet::clear_our_color() {
  our_color_ = 0;
  clear_has_our_color();
}
inline ::ssl_decision_packet_Color ssl_decision_packet::our_color() const {
  return static_cast< ::ssl_decision_packet_Color >(our_color_);
}
inline void ssl_decision_packet::set_our_color(::ssl_decision_packet_Color value) {
  GOOGLE_DCHECK(::ssl_decision_packet_Color_IsValid(value));
  set_has_our_color();
  our_color_ = value;
}

// required .ssl_decision_packet.Side our_side = 2;
inline bool ssl_decision_packet::has_our_side() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_decision_packet::set_has_our_side() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_decision_packet::clear_has_our_side() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_decision_packet::clear_our_side() {
  our_side_ = -1;
  clear_has_our_side();
}
inline ::ssl_decision_packet_Side ssl_decision_packet::our_side() const {
  return static_cast< ::ssl_decision_packet_Side >(our_side_);
}
inline void ssl_decision_packet::set_our_side(::ssl_decision_packet_Side value) {
  GOOGLE_DCHECK(::ssl_decision_packet_Side_IsValid(value));
  set_has_our_side();
  our_side_ = value;
}

// required string strategy_name = 3;
inline bool ssl_decision_packet::has_strategy_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_decision_packet::set_has_strategy_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_decision_packet::clear_has_strategy_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_decision_packet::clear_strategy_name() {
  if (strategy_name_ != &::google::protobuf::internal::kEmptyString) {
    strategy_name_->clear();
  }
  clear_has_strategy_name();
}
inline const ::std::string& ssl_decision_packet::strategy_name() const {
  return *strategy_name_;
}
inline void ssl_decision_packet::set_strategy_name(const ::std::string& value) {
  set_has_strategy_name();
  if (strategy_name_ == &::google::protobuf::internal::kEmptyString) {
    strategy_name_ = new ::std::string;
  }
  strategy_name_->assign(value);
}
inline void ssl_decision_packet::set_strategy_name(const char* value) {
  set_has_strategy_name();
  if (strategy_name_ == &::google::protobuf::internal::kEmptyString) {
    strategy_name_ = new ::std::string;
  }
  strategy_name_->assign(value);
}
inline void ssl_decision_packet::set_strategy_name(const char* value, size_t size) {
  set_has_strategy_name();
  if (strategy_name_ == &::google::protobuf::internal::kEmptyString) {
    strategy_name_ = new ::std::string;
  }
  strategy_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_decision_packet::mutable_strategy_name() {
  set_has_strategy_name();
  if (strategy_name_ == &::google::protobuf::internal::kEmptyString) {
    strategy_name_ = new ::std::string;
  }
  return strategy_name_;
}
inline ::std::string* ssl_decision_packet::release_strategy_name() {
  clear_has_strategy_name();
  if (strategy_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strategy_name_;
    strategy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ssl_decision_packet.Robot_Role robot_roles = 4;
inline int ssl_decision_packet::robot_roles_size() const {
  return robot_roles_.size();
}
inline void ssl_decision_packet::clear_robot_roles() {
  robot_roles_.Clear();
}
inline const ::ssl_decision_packet_Robot_Role& ssl_decision_packet::robot_roles(int index) const {
  return robot_roles_.Get(index);
}
inline ::ssl_decision_packet_Robot_Role* ssl_decision_packet::mutable_robot_roles(int index) {
  return robot_roles_.Mutable(index);
}
inline ::ssl_decision_packet_Robot_Role* ssl_decision_packet::add_robot_roles() {
  return robot_roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_decision_packet_Robot_Role >&
ssl_decision_packet::robot_roles() const {
  return robot_roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_decision_packet_Robot_Role >*
ssl_decision_packet::mutable_robot_roles() {
  return &robot_roles_;
}

// optional string comment = 5;
inline bool ssl_decision_packet::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ssl_decision_packet::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ssl_decision_packet::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ssl_decision_packet::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ssl_decision_packet::comment() const {
  return *comment_;
}
inline void ssl_decision_packet::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_decision_packet::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_decision_packet::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_decision_packet::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* ssl_decision_packet::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_decision_packet_Color>() {
  return ::ssl_decision_packet_Color_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_decision_packet_Side>() {
  return ::ssl_decision_packet_Side_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5fdecision_2eproto__INCLUDED
