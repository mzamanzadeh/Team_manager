// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_visualizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ssl_visualizer_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_visualizer_packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fvisualizer_2eproto() {
  protobuf_AddDesc_ssl_5fvisualizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_visualizer.proto");
  GOOGLE_CHECK(file != NULL);
  ssl_visualizer_packet_descriptor_ = file->message_type(0);
  static const int ssl_visualizer_packet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, world_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, analyzer_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, decision_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, planner_data_),
  };
  ssl_visualizer_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_visualizer_packet_descriptor_,
      ssl_visualizer_packet::default_instance_,
      ssl_visualizer_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_visualizer_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_visualizer_packet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fvisualizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_visualizer_packet_descriptor_, &ssl_visualizer_packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fvisualizer_2eproto() {
  delete ssl_visualizer_packet::default_instance_;
  delete ssl_visualizer_packet_reflection_;
}

void protobuf_AddDesc_ssl_5fvisualizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ssl_5fworld_2eproto();
  ::protobuf_AddDesc_ssl_5fanalyzer_2eproto();
  ::protobuf_AddDesc_ssl_5fdecision_2eproto();
  ::protobuf_AddDesc_ssl_5fplanner_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ssl_visualizer.proto\032\017ssl_world.proto\032"
    "\022ssl_analyzer.proto\032\022ssl_decision.proto\032"
    "\021ssl_planner.proto\"\303\001\n\025ssl_visualizer_pa"
    "cket\022%\n\nworld_data\030\001 \001(\0132\021.ssl_world_pac"
    "ket\022+\n\ranalyzer_data\030\002 \001(\0132\024.ssl_analyze"
    "r_packet\022+\n\rdecision_data\030\003 \001(\0132\024.ssl_de"
    "cision_packet\022)\n\014planner_data\030\004 \001(\0132\023.ss"
    "l_planner_packet", 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_visualizer.proto", &protobuf_RegisterTypes);
  ssl_visualizer_packet::default_instance_ = new ssl_visualizer_packet();
  ssl_visualizer_packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fvisualizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fvisualizer_2eproto {
  StaticDescriptorInitializer_ssl_5fvisualizer_2eproto() {
    protobuf_AddDesc_ssl_5fvisualizer_2eproto();
  }
} static_descriptor_initializer_ssl_5fvisualizer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ssl_visualizer_packet::kWorldDataFieldNumber;
const int ssl_visualizer_packet::kAnalyzerDataFieldNumber;
const int ssl_visualizer_packet::kDecisionDataFieldNumber;
const int ssl_visualizer_packet::kPlannerDataFieldNumber;
#endif  // !_MSC_VER

ssl_visualizer_packet::ssl_visualizer_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_visualizer_packet::InitAsDefaultInstance() {
  world_data_ = const_cast< ::ssl_world_packet*>(&::ssl_world_packet::default_instance());
  analyzer_data_ = const_cast< ::ssl_analyzer_packet*>(&::ssl_analyzer_packet::default_instance());
  decision_data_ = const_cast< ::ssl_decision_packet*>(&::ssl_decision_packet::default_instance());
  planner_data_ = const_cast< ::ssl_planner_packet*>(&::ssl_planner_packet::default_instance());
}

ssl_visualizer_packet::ssl_visualizer_packet(const ssl_visualizer_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_visualizer_packet::SharedCtor() {
  _cached_size_ = 0;
  world_data_ = NULL;
  analyzer_data_ = NULL;
  decision_data_ = NULL;
  planner_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_visualizer_packet::~ssl_visualizer_packet() {
  SharedDtor();
}

void ssl_visualizer_packet::SharedDtor() {
  if (this != default_instance_) {
    delete world_data_;
    delete analyzer_data_;
    delete decision_data_;
    delete planner_data_;
  }
}

void ssl_visualizer_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_visualizer_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_visualizer_packet_descriptor_;
}

const ssl_visualizer_packet& ssl_visualizer_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fvisualizer_2eproto();  return *default_instance_;
}

ssl_visualizer_packet* ssl_visualizer_packet::default_instance_ = NULL;

ssl_visualizer_packet* ssl_visualizer_packet::New() const {
  return new ssl_visualizer_packet;
}

void ssl_visualizer_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_world_data()) {
      if (world_data_ != NULL) world_data_->::ssl_world_packet::Clear();
    }
    if (has_analyzer_data()) {
      if (analyzer_data_ != NULL) analyzer_data_->::ssl_analyzer_packet::Clear();
    }
    if (has_decision_data()) {
      if (decision_data_ != NULL) decision_data_->::ssl_decision_packet::Clear();
    }
    if (has_planner_data()) {
      if (planner_data_ != NULL) planner_data_->::ssl_planner_packet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_visualizer_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_world_packet world_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_analyzer_data;
        break;
      }
      
      // optional .ssl_analyzer_packet analyzer_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_analyzer_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analyzer_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_decision_data;
        break;
      }
      
      // optional .ssl_decision_packet decision_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decision_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_planner_data;
        break;
      }
      
      // optional .ssl_planner_packet planner_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planner_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planner_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_visualizer_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssl_world_packet world_data = 1;
  if (has_world_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->world_data(), output);
  }
  
  // optional .ssl_analyzer_packet analyzer_data = 2;
  if (has_analyzer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->analyzer_data(), output);
  }
  
  // optional .ssl_decision_packet decision_data = 3;
  if (has_decision_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decision_data(), output);
  }
  
  // optional .ssl_planner_packet planner_data = 4;
  if (has_planner_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->planner_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_visualizer_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssl_world_packet world_data = 1;
  if (has_world_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->world_data(), target);
  }
  
  // optional .ssl_analyzer_packet analyzer_data = 2;
  if (has_analyzer_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->analyzer_data(), target);
  }
  
  // optional .ssl_decision_packet decision_data = 3;
  if (has_decision_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->decision_data(), target);
  }
  
  // optional .ssl_planner_packet planner_data = 4;
  if (has_planner_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->planner_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_visualizer_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssl_world_packet world_data = 1;
    if (has_world_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_data());
    }
    
    // optional .ssl_analyzer_packet analyzer_data = 2;
    if (has_analyzer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analyzer_data());
    }
    
    // optional .ssl_decision_packet decision_data = 3;
    if (has_decision_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decision_data());
    }
    
    // optional .ssl_planner_packet planner_data = 4;
    if (has_planner_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planner_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_visualizer_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_visualizer_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_visualizer_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_visualizer_packet::MergeFrom(const ssl_visualizer_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_data()) {
      mutable_world_data()->::ssl_world_packet::MergeFrom(from.world_data());
    }
    if (from.has_analyzer_data()) {
      mutable_analyzer_data()->::ssl_analyzer_packet::MergeFrom(from.analyzer_data());
    }
    if (from.has_decision_data()) {
      mutable_decision_data()->::ssl_decision_packet::MergeFrom(from.decision_data());
    }
    if (from.has_planner_data()) {
      mutable_planner_data()->::ssl_planner_packet::MergeFrom(from.planner_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_visualizer_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_visualizer_packet::CopyFrom(const ssl_visualizer_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_visualizer_packet::IsInitialized() const {
  
  if (has_world_data()) {
    if (!this->world_data().IsInitialized()) return false;
  }
  if (has_analyzer_data()) {
    if (!this->analyzer_data().IsInitialized()) return false;
  }
  if (has_decision_data()) {
    if (!this->decision_data().IsInitialized()) return false;
  }
  if (has_planner_data()) {
    if (!this->planner_data().IsInitialized()) return false;
  }
  return true;
}

void ssl_visualizer_packet::Swap(ssl_visualizer_packet* other) {
  if (other != this) {
    std::swap(world_data_, other->world_data_);
    std::swap(analyzer_data_, other->analyzer_data_);
    std::swap(decision_data_, other->decision_data_);
    std::swap(planner_data_, other->planner_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_visualizer_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_visualizer_packet_descriptor_;
  metadata.reflection = ssl_visualizer_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
