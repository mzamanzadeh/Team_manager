// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_planner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* planner_vec3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_vec3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* planner_point2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_point2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* planner_circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* planner_polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* planner_obstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_obstacles_reflection_ = NULL;
const ::google::protobuf::Descriptor* planner_plan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planner_plan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_planner_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_planner_packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fplanner_2eproto() {
  protobuf_AddDesc_ssl_5fplanner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_planner.proto");
  GOOGLE_CHECK(file != NULL);
  planner_vec3d_descriptor_ = file->message_type(0);
  static const int planner_vec3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_vec3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_vec3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_vec3d, teta_),
  };
  planner_vec3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_vec3d_descriptor_,
      planner_vec3d::default_instance_,
      planner_vec3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_vec3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_vec3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_vec3d));
  planner_point2d_descriptor_ = file->message_type(1);
  static const int planner_point2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_point2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_point2d, y_),
  };
  planner_point2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_point2d_descriptor_,
      planner_point2d::default_instance_,
      planner_point2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_point2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_point2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_point2d));
  planner_circle_descriptor_ = file->message_type(2);
  static const int planner_circle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_circle, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_circle, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_circle, orien_),
  };
  planner_circle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_circle_descriptor_,
      planner_circle::default_instance_,
      planner_circle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_circle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_circle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_circle));
  planner_polygon_descriptor_ = file->message_type(3);
  static const int planner_polygon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_polygon, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_polygon, orien_),
  };
  planner_polygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_polygon_descriptor_,
      planner_polygon::default_instance_,
      planner_polygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_polygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_polygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_polygon));
  planner_obstacles_descriptor_ = file->message_type(4);
  static const int planner_obstacles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_obstacles, circles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_obstacles, polygons_),
  };
  planner_obstacles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_obstacles_descriptor_,
      planner_obstacles::default_instance_,
      planner_obstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_obstacles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_obstacles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_obstacles));
  planner_plan_descriptor_ = file->message_type(5);
  static const int planner_plan_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, pathstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, initstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, goalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, desiredvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, appliedvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, obstacleset_),
  };
  planner_plan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      planner_plan_descriptor_,
      planner_plan::default_instance_,
      planner_plan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planner_plan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(planner_plan));
  ssl_planner_packet_descriptor_ = file->message_type(6);
  static const int ssl_planner_packet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_planner_packet, plans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_planner_packet, plannerbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_planner_packet, comment_),
  };
  ssl_planner_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_planner_packet_descriptor_,
      ssl_planner_packet::default_instance_,
      ssl_planner_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_planner_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_planner_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_planner_packet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fplanner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_vec3d_descriptor_, &planner_vec3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_point2d_descriptor_, &planner_point2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_circle_descriptor_, &planner_circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_polygon_descriptor_, &planner_polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_obstacles_descriptor_, &planner_obstacles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    planner_plan_descriptor_, &planner_plan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_planner_packet_descriptor_, &ssl_planner_packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fplanner_2eproto() {
  delete planner_vec3d::default_instance_;
  delete planner_vec3d_reflection_;
  delete planner_point2d::default_instance_;
  delete planner_point2d_reflection_;
  delete planner_circle::default_instance_;
  delete planner_circle_reflection_;
  delete planner_polygon::default_instance_;
  delete planner_polygon_reflection_;
  delete planner_obstacles::default_instance_;
  delete planner_obstacles_reflection_;
  delete planner_plan::default_instance_;
  delete planner_plan_reflection_;
  delete ssl_planner_packet::default_instance_;
  delete ssl_planner_packet_reflection_;
}

void protobuf_AddDesc_ssl_5fplanner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ssl_planner.proto\"3\n\rplanner_vec3d\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\014\n\004teta\030\003 \002(\002\"\'\n\017plan"
    "ner_point2d\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"Q\n\016pla"
    "nner_circle\022 \n\006center\030\001 \002(\0132\020.planner_po"
    "int2d\022\016\n\006radius\030\002 \002(\002\022\r\n\005orien\030\003 \001(\002\"B\n\017"
    "planner_polygon\022 \n\006vertex\030\001 \003(\0132\020.planne"
    "r_point2d\022\r\n\005orien\030\002 \001(\002\"Y\n\021planner_obst"
    "acles\022 \n\007circles\030\001 \003(\0132\017.planner_circle\022"
    "\"\n\010polygons\030\002 \003(\0132\020.planner_polygon\"\364\001\n\014"
    "planner_plan\022\n\n\002id\030\001 \002(\r\022!\n\tpathState\030\002 "
    "\003(\0132\016.planner_vec3d\022!\n\tinitState\030\003 \002(\0132\016"
    ".planner_vec3d\022!\n\tgoalState\030\004 \002(\0132\016.plan"
    "ner_vec3d\022\"\n\ndesiredVel\030\005 \002(\0132\016.planner_"
    "vec3d\022\"\n\nappliedVel\030\006 \002(\0132\016.planner_vec3"
    "d\022\'\n\013obstacleSet\030\007 \001(\0132\022.planner_obstacl"
    "es\"k\n\022ssl_planner_packet\022\034\n\005plans\030\001 \003(\0132"
    "\r.planner_plan\022&\n\014plannerBound\030\002 \001(\0132\020.p"
    "lanner_polygon\022\017\n\007comment\030\003 \001(\t", 711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_planner.proto", &protobuf_RegisterTypes);
  planner_vec3d::default_instance_ = new planner_vec3d();
  planner_point2d::default_instance_ = new planner_point2d();
  planner_circle::default_instance_ = new planner_circle();
  planner_polygon::default_instance_ = new planner_polygon();
  planner_obstacles::default_instance_ = new planner_obstacles();
  planner_plan::default_instance_ = new planner_plan();
  ssl_planner_packet::default_instance_ = new ssl_planner_packet();
  planner_vec3d::default_instance_->InitAsDefaultInstance();
  planner_point2d::default_instance_->InitAsDefaultInstance();
  planner_circle::default_instance_->InitAsDefaultInstance();
  planner_polygon::default_instance_->InitAsDefaultInstance();
  planner_obstacles::default_instance_->InitAsDefaultInstance();
  planner_plan::default_instance_->InitAsDefaultInstance();
  ssl_planner_packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fplanner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fplanner_2eproto {
  StaticDescriptorInitializer_ssl_5fplanner_2eproto() {
    protobuf_AddDesc_ssl_5fplanner_2eproto();
  }
} static_descriptor_initializer_ssl_5fplanner_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int planner_vec3d::kXFieldNumber;
const int planner_vec3d::kYFieldNumber;
const int planner_vec3d::kTetaFieldNumber;
#endif  // !_MSC_VER

planner_vec3d::planner_vec3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_vec3d::InitAsDefaultInstance() {
}

planner_vec3d::planner_vec3d(const planner_vec3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_vec3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  teta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_vec3d::~planner_vec3d() {
  SharedDtor();
}

void planner_vec3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void planner_vec3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_vec3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_vec3d_descriptor_;
}

const planner_vec3d& planner_vec3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_vec3d* planner_vec3d::default_instance_ = NULL;

planner_vec3d* planner_vec3d::New() const {
  return new planner_vec3d;
}

void planner_vec3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    teta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_vec3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_teta;
        break;
      }
      
      // required float teta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_teta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teta_)));
          set_has_teta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_vec3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->teta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_vec3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->teta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_vec3d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float teta = 3;
    if (has_teta()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_vec3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_vec3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_vec3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_vec3d::MergeFrom(const planner_vec3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_teta()) {
      set_teta(from.teta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_vec3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_vec3d::CopyFrom(const planner_vec3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_vec3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void planner_vec3d::Swap(planner_vec3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(teta_, other->teta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_vec3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_vec3d_descriptor_;
  metadata.reflection = planner_vec3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int planner_point2d::kXFieldNumber;
const int planner_point2d::kYFieldNumber;
#endif  // !_MSC_VER

planner_point2d::planner_point2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_point2d::InitAsDefaultInstance() {
}

planner_point2d::planner_point2d(const planner_point2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_point2d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_point2d::~planner_point2d() {
  SharedDtor();
}

void planner_point2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void planner_point2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_point2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_point2d_descriptor_;
}

const planner_point2d& planner_point2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_point2d* planner_point2d::default_instance_ = NULL;

planner_point2d* planner_point2d::New() const {
  return new planner_point2d;
}

void planner_point2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_point2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_point2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_point2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_point2d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_point2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_point2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_point2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_point2d::MergeFrom(const planner_point2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_point2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_point2d::CopyFrom(const planner_point2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_point2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void planner_point2d::Swap(planner_point2d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_point2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_point2d_descriptor_;
  metadata.reflection = planner_point2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int planner_circle::kCenterFieldNumber;
const int planner_circle::kRadiusFieldNumber;
const int planner_circle::kOrienFieldNumber;
#endif  // !_MSC_VER

planner_circle::planner_circle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_circle::InitAsDefaultInstance() {
  center_ = const_cast< ::planner_point2d*>(&::planner_point2d::default_instance());
}

planner_circle::planner_circle(const planner_circle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_circle::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = 0;
  orien_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_circle::~planner_circle() {
  SharedDtor();
}

void planner_circle::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void planner_circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_circle_descriptor_;
}

const planner_circle& planner_circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_circle* planner_circle::default_instance_ = NULL;

planner_circle* planner_circle::New() const {
  return new planner_circle;
}

void planner_circle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::planner_point2d::Clear();
    }
    radius_ = 0;
    orien_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .planner_point2d center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }
      
      // required float radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_orien;
        break;
      }
      
      // optional float orien = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orien:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orien_)));
          set_has_orien();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .planner_point2d center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }
  
  // required float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }
  
  // optional float orien = 3;
  if (has_orien()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->orien(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_circle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .planner_point2d center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }
  
  // optional float orien = 3;
  if (has_orien()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->orien(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_circle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .planner_point2d center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }
    
    // optional float orien = 3;
    if (has_orien()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_circle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_circle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_circle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_circle::MergeFrom(const planner_circle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::planner_point2d::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_orien()) {
      set_orien(from.orien());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_circle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_circle::CopyFrom(const planner_circle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void planner_circle::Swap(planner_circle* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(orien_, other->orien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_circle_descriptor_;
  metadata.reflection = planner_circle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int planner_polygon::kVertexFieldNumber;
const int planner_polygon::kOrienFieldNumber;
#endif  // !_MSC_VER

planner_polygon::planner_polygon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_polygon::InitAsDefaultInstance() {
}

planner_polygon::planner_polygon(const planner_polygon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_polygon::SharedCtor() {
  _cached_size_ = 0;
  orien_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_polygon::~planner_polygon() {
  SharedDtor();
}

void planner_polygon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void planner_polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_polygon_descriptor_;
}

const planner_polygon& planner_polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_polygon* planner_polygon::default_instance_ = NULL;

planner_polygon* planner_polygon::New() const {
  return new planner_polygon;
}

void planner_polygon::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    orien_ = 0;
  }
  vertex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planner_point2d vertex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vertex;
        if (input->ExpectTag(21)) goto parse_orien;
        break;
      }
      
      // optional float orien = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orien:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orien_)));
          set_has_orien();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .planner_point2d vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex(i), output);
  }
  
  // optional float orien = 2;
  if (has_orien()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->orien(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .planner_point2d vertex = 1;
  for (int i = 0; i < this->vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex(i), target);
  }
  
  // optional float orien = 2;
  if (has_orien()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->orien(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_polygon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float orien = 2;
    if (has_orien()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .planner_point2d vertex = 1;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_polygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_polygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_polygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_polygon::MergeFrom(const planner_polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_.MergeFrom(from.vertex_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_orien()) {
      set_orien(from.orien());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_polygon::CopyFrom(const planner_polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_polygon::IsInitialized() const {
  
  for (int i = 0; i < vertex_size(); i++) {
    if (!this->vertex(i).IsInitialized()) return false;
  }
  return true;
}

void planner_polygon::Swap(planner_polygon* other) {
  if (other != this) {
    vertex_.Swap(&other->vertex_);
    std::swap(orien_, other->orien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_polygon_descriptor_;
  metadata.reflection = planner_polygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int planner_obstacles::kCirclesFieldNumber;
const int planner_obstacles::kPolygonsFieldNumber;
#endif  // !_MSC_VER

planner_obstacles::planner_obstacles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_obstacles::InitAsDefaultInstance() {
}

planner_obstacles::planner_obstacles(const planner_obstacles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_obstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_obstacles::~planner_obstacles() {
  SharedDtor();
}

void planner_obstacles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void planner_obstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_obstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_obstacles_descriptor_;
}

const planner_obstacles& planner_obstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_obstacles* planner_obstacles::default_instance_ = NULL;

planner_obstacles* planner_obstacles::New() const {
  return new planner_obstacles;
}

void planner_obstacles::Clear() {
  circles_.Clear();
  polygons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planner_circle circles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_circles;
        if (input->ExpectTag(18)) goto parse_polygons;
        break;
      }
      
      // repeated .planner_polygon polygons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polygons;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .planner_circle circles = 1;
  for (int i = 0; i < this->circles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->circles(i), output);
  }
  
  // repeated .planner_polygon polygons = 2;
  for (int i = 0; i < this->polygons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->polygons(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_obstacles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .planner_circle circles = 1;
  for (int i = 0; i < this->circles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->circles(i), target);
  }
  
  // repeated .planner_polygon polygons = 2;
  for (int i = 0; i < this->polygons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->polygons(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_obstacles::ByteSize() const {
  int total_size = 0;
  
  // repeated .planner_circle circles = 1;
  total_size += 1 * this->circles_size();
  for (int i = 0; i < this->circles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circles(i));
  }
  
  // repeated .planner_polygon polygons = 2;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_obstacles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_obstacles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_obstacles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_obstacles::MergeFrom(const planner_obstacles& from) {
  GOOGLE_CHECK_NE(&from, this);
  circles_.MergeFrom(from.circles_);
  polygons_.MergeFrom(from.polygons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_obstacles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_obstacles::CopyFrom(const planner_obstacles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_obstacles::IsInitialized() const {
  
  for (int i = 0; i < circles_size(); i++) {
    if (!this->circles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < polygons_size(); i++) {
    if (!this->polygons(i).IsInitialized()) return false;
  }
  return true;
}

void planner_obstacles::Swap(planner_obstacles* other) {
  if (other != this) {
    circles_.Swap(&other->circles_);
    polygons_.Swap(&other->polygons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_obstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_obstacles_descriptor_;
  metadata.reflection = planner_obstacles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int planner_plan::kIdFieldNumber;
const int planner_plan::kPathStateFieldNumber;
const int planner_plan::kInitStateFieldNumber;
const int planner_plan::kGoalStateFieldNumber;
const int planner_plan::kDesiredVelFieldNumber;
const int planner_plan::kAppliedVelFieldNumber;
const int planner_plan::kObstacleSetFieldNumber;
#endif  // !_MSC_VER

planner_plan::planner_plan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void planner_plan::InitAsDefaultInstance() {
  initstate_ = const_cast< ::planner_vec3d*>(&::planner_vec3d::default_instance());
  goalstate_ = const_cast< ::planner_vec3d*>(&::planner_vec3d::default_instance());
  desiredvel_ = const_cast< ::planner_vec3d*>(&::planner_vec3d::default_instance());
  appliedvel_ = const_cast< ::planner_vec3d*>(&::planner_vec3d::default_instance());
  obstacleset_ = const_cast< ::planner_obstacles*>(&::planner_obstacles::default_instance());
}

planner_plan::planner_plan(const planner_plan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void planner_plan::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  initstate_ = NULL;
  goalstate_ = NULL;
  desiredvel_ = NULL;
  appliedvel_ = NULL;
  obstacleset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

planner_plan::~planner_plan() {
  SharedDtor();
}

void planner_plan::SharedDtor() {
  if (this != default_instance_) {
    delete initstate_;
    delete goalstate_;
    delete desiredvel_;
    delete appliedvel_;
    delete obstacleset_;
  }
}

void planner_plan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planner_plan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planner_plan_descriptor_;
}

const planner_plan& planner_plan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

planner_plan* planner_plan::default_instance_ = NULL;

planner_plan* planner_plan::New() const {
  return new planner_plan;
}

void planner_plan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_initstate()) {
      if (initstate_ != NULL) initstate_->::planner_vec3d::Clear();
    }
    if (has_goalstate()) {
      if (goalstate_ != NULL) goalstate_->::planner_vec3d::Clear();
    }
    if (has_desiredvel()) {
      if (desiredvel_ != NULL) desiredvel_->::planner_vec3d::Clear();
    }
    if (has_appliedvel()) {
      if (appliedvel_ != NULL) appliedvel_->::planner_vec3d::Clear();
    }
    if (has_obstacleset()) {
      if (obstacleset_ != NULL) obstacleset_->::planner_obstacles::Clear();
    }
  }
  pathstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool planner_plan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pathState;
        break;
      }
      
      // repeated .planner_vec3d pathState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pathstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pathState;
        if (input->ExpectTag(26)) goto parse_initState;
        break;
      }
      
      // required .planner_vec3d initState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_goalState;
        break;
      }
      
      // required .planner_vec3d goalState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goalState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desiredVel;
        break;
      }
      
      // required .planner_vec3d desiredVel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desiredVel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desiredvel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_appliedVel;
        break;
      }
      
      // required .planner_vec3d appliedVel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appliedVel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appliedvel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obstacleSet;
        break;
      }
      
      // optional .planner_obstacles obstacleSet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacleSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obstacleset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void planner_plan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .planner_vec3d pathState = 2;
  for (int i = 0; i < this->pathstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathstate(i), output);
  }
  
  // required .planner_vec3d initState = 3;
  if (has_initstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->initstate(), output);
  }
  
  // required .planner_vec3d goalState = 4;
  if (has_goalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goalstate(), output);
  }
  
  // required .planner_vec3d desiredVel = 5;
  if (has_desiredvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->desiredvel(), output);
  }
  
  // required .planner_vec3d appliedVel = 6;
  if (has_appliedvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->appliedvel(), output);
  }
  
  // optional .planner_obstacles obstacleSet = 7;
  if (has_obstacleset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obstacleset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* planner_plan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .planner_vec3d pathState = 2;
  for (int i = 0; i < this->pathstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pathstate(i), target);
  }
  
  // required .planner_vec3d initState = 3;
  if (has_initstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->initstate(), target);
  }
  
  // required .planner_vec3d goalState = 4;
  if (has_goalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->goalstate(), target);
  }
  
  // required .planner_vec3d desiredVel = 5;
  if (has_desiredvel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->desiredvel(), target);
  }
  
  // required .planner_vec3d appliedVel = 6;
  if (has_appliedvel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->appliedvel(), target);
  }
  
  // optional .planner_obstacles obstacleSet = 7;
  if (has_obstacleset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obstacleset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int planner_plan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .planner_vec3d initState = 3;
    if (has_initstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initstate());
    }
    
    // required .planner_vec3d goalState = 4;
    if (has_goalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goalstate());
    }
    
    // required .planner_vec3d desiredVel = 5;
    if (has_desiredvel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desiredvel());
    }
    
    // required .planner_vec3d appliedVel = 6;
    if (has_appliedvel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appliedvel());
    }
    
    // optional .planner_obstacles obstacleSet = 7;
    if (has_obstacleset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacleset());
    }
    
  }
  // repeated .planner_vec3d pathState = 2;
  total_size += 1 * this->pathstate_size();
  for (int i = 0; i < this->pathstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathstate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planner_plan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const planner_plan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const planner_plan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planner_plan::MergeFrom(const planner_plan& from) {
  GOOGLE_CHECK_NE(&from, this);
  pathstate_.MergeFrom(from.pathstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_initstate()) {
      mutable_initstate()->::planner_vec3d::MergeFrom(from.initstate());
    }
    if (from.has_goalstate()) {
      mutable_goalstate()->::planner_vec3d::MergeFrom(from.goalstate());
    }
    if (from.has_desiredvel()) {
      mutable_desiredvel()->::planner_vec3d::MergeFrom(from.desiredvel());
    }
    if (from.has_appliedvel()) {
      mutable_appliedvel()->::planner_vec3d::MergeFrom(from.appliedvel());
    }
    if (from.has_obstacleset()) {
      mutable_obstacleset()->::planner_obstacles::MergeFrom(from.obstacleset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void planner_plan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planner_plan::CopyFrom(const planner_plan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planner_plan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  
  for (int i = 0; i < pathstate_size(); i++) {
    if (!this->pathstate(i).IsInitialized()) return false;
  }
  if (has_initstate()) {
    if (!this->initstate().IsInitialized()) return false;
  }
  if (has_goalstate()) {
    if (!this->goalstate().IsInitialized()) return false;
  }
  if (has_desiredvel()) {
    if (!this->desiredvel().IsInitialized()) return false;
  }
  if (has_appliedvel()) {
    if (!this->appliedvel().IsInitialized()) return false;
  }
  if (has_obstacleset()) {
    if (!this->obstacleset().IsInitialized()) return false;
  }
  return true;
}

void planner_plan::Swap(planner_plan* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pathstate_.Swap(&other->pathstate_);
    std::swap(initstate_, other->initstate_);
    std::swap(goalstate_, other->goalstate_);
    std::swap(desiredvel_, other->desiredvel_);
    std::swap(appliedvel_, other->appliedvel_);
    std::swap(obstacleset_, other->obstacleset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata planner_plan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planner_plan_descriptor_;
  metadata.reflection = planner_plan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssl_planner_packet::kPlansFieldNumber;
const int ssl_planner_packet::kPlannerBoundFieldNumber;
const int ssl_planner_packet::kCommentFieldNumber;
#endif  // !_MSC_VER

ssl_planner_packet::ssl_planner_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_planner_packet::InitAsDefaultInstance() {
  plannerbound_ = const_cast< ::planner_polygon*>(&::planner_polygon::default_instance());
}

ssl_planner_packet::ssl_planner_packet(const ssl_planner_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_planner_packet::SharedCtor() {
  _cached_size_ = 0;
  plannerbound_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_planner_packet::~ssl_planner_packet() {
  SharedDtor();
}

void ssl_planner_packet::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete plannerbound_;
  }
}

void ssl_planner_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_planner_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_planner_packet_descriptor_;
}

const ssl_planner_packet& ssl_planner_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fplanner_2eproto();  return *default_instance_;
}

ssl_planner_packet* ssl_planner_packet::default_instance_ = NULL;

ssl_planner_packet* ssl_planner_packet::New() const {
  return new ssl_planner_packet;
}

void ssl_planner_packet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_plannerbound()) {
      if (plannerbound_ != NULL) plannerbound_->::planner_polygon::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  plans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_planner_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planner_plan plans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plans;
        if (input->ExpectTag(18)) goto parse_plannerBound;
        break;
      }
      
      // optional .planner_polygon plannerBound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plannerBound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plannerbound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }
      
      // optional string comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_planner_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .planner_plan plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plans(i), output);
  }
  
  // optional .planner_polygon plannerBound = 2;
  if (has_plannerbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plannerbound(), output);
  }
  
  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_planner_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .planner_plan plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plans(i), target);
  }
  
  // optional .planner_polygon plannerBound = 2;
  if (has_plannerbound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plannerbound(), target);
  }
  
  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_planner_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .planner_polygon plannerBound = 2;
    if (has_plannerbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannerbound());
    }
    
    // optional string comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  // repeated .planner_plan plans = 1;
  total_size += 1 * this->plans_size();
  for (int i = 0; i < this->plans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plans(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_planner_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_planner_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_planner_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_planner_packet::MergeFrom(const ssl_planner_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  plans_.MergeFrom(from.plans_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_plannerbound()) {
      mutable_plannerbound()->::planner_polygon::MergeFrom(from.plannerbound());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_planner_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_planner_packet::CopyFrom(const ssl_planner_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_planner_packet::IsInitialized() const {
  
  for (int i = 0; i < plans_size(); i++) {
    if (!this->plans(i).IsInitialized()) return false;
  }
  if (has_plannerbound()) {
    if (!this->plannerbound().IsInitialized()) return false;
  }
  return true;
}

void ssl_planner_packet::Swap(ssl_planner_packet* other) {
  if (other != this) {
    plans_.Swap(&other->plans_);
    std::swap(plannerbound_, other->plannerbound_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_planner_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_planner_packet_descriptor_;
  metadata.reflection = ssl_planner_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
