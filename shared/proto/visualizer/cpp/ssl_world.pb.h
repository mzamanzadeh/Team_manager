// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_world.proto

#ifndef PROTOBUF_ssl_5fworld_2eproto__INCLUDED
#define PROTOBUF_ssl_5fworld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssl_5fworld_2eproto();
void protobuf_AssignDesc_ssl_5fworld_2eproto();
void protobuf_ShutdownFile_ssl_5fworld_2eproto();

class ssl_world_packet;
class ssl_world_packet_vector_3d;
class ssl_world_packet_Ball;
class ssl_world_packet_Robot;
class ssl_world_packet_Team;

enum ssl_world_packet_Side {
  ssl_world_packet_Side_left = -1,
  ssl_world_packet_Side_right = 1
};
bool ssl_world_packet_Side_IsValid(int value);
const ssl_world_packet_Side ssl_world_packet_Side_Side_MIN = ssl_world_packet_Side_left;
const ssl_world_packet_Side ssl_world_packet_Side_Side_MAX = ssl_world_packet_Side_right;
const int ssl_world_packet_Side_Side_ARRAYSIZE = ssl_world_packet_Side_Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* ssl_world_packet_Side_descriptor();
inline const ::std::string& ssl_world_packet_Side_Name(ssl_world_packet_Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    ssl_world_packet_Side_descriptor(), value);
}
inline bool ssl_world_packet_Side_Parse(
    const ::std::string& name, ssl_world_packet_Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ssl_world_packet_Side>(
    ssl_world_packet_Side_descriptor(), name, value);
}
// ===================================================================

class ssl_world_packet_vector_3d : public ::google::protobuf::Message {
 public:
  ssl_world_packet_vector_3d();
  virtual ~ssl_world_packet_vector_3d();
  
  ssl_world_packet_vector_3d(const ssl_world_packet_vector_3d& from);
  
  inline ssl_world_packet_vector_3d& operator=(const ssl_world_packet_vector_3d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet_vector_3d& default_instance();
  
  void Swap(ssl_world_packet_vector_3d* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet_vector_3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet_vector_3d& from);
  void MergeFrom(const ssl_world_packet_vector_3d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float teta = 3;
  inline bool has_teta() const;
  inline void clear_teta();
  static const int kTetaFieldNumber = 3;
  inline float teta() const;
  inline void set_teta(float value);
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet.vector_3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_teta();
  inline void clear_has_teta();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float teta_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet_vector_3d* default_instance_;
};
// -------------------------------------------------------------------

class ssl_world_packet_Ball : public ::google::protobuf::Message {
 public:
  ssl_world_packet_Ball();
  virtual ~ssl_world_packet_Ball();
  
  ssl_world_packet_Ball(const ssl_world_packet_Ball& from);
  
  inline ssl_world_packet_Ball& operator=(const ssl_world_packet_Ball& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet_Ball& default_instance();
  
  void Swap(ssl_world_packet_Ball* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet_Ball* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet_Ball& from);
  void MergeFrom(const ssl_world_packet_Ball& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .ssl_world_packet.vector_3d position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::ssl_world_packet_vector_3d& position() const;
  inline ::ssl_world_packet_vector_3d* mutable_position();
  inline ::ssl_world_packet_vector_3d* release_position();
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline const ::ssl_world_packet_vector_3d& velocity() const;
  inline ::ssl_world_packet_vector_3d* mutable_velocity();
  inline ::ssl_world_packet_vector_3d* release_velocity();
  
  // required .ssl_world_packet.vector_3d acceleration = 4;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 4;
  inline const ::ssl_world_packet_vector_3d& acceleration() const;
  inline ::ssl_world_packet_vector_3d* mutable_acceleration();
  inline ::ssl_world_packet_vector_3d* release_acceleration();
  
  // optional .ssl_world_packet.vector_3d displacement = 5;
  inline bool has_displacement() const;
  inline void clear_displacement();
  static const int kDisplacementFieldNumber = 5;
  inline const ::ssl_world_packet_vector_3d& displacement() const;
  inline ::ssl_world_packet_vector_3d* mutable_displacement();
  inline ::ssl_world_packet_vector_3d* release_displacement();
  
  // optional .ssl_world_packet.vector_3d velocity_raw = 6;
  inline bool has_velocity_raw() const;
  inline void clear_velocity_raw();
  static const int kVelocityRawFieldNumber = 6;
  inline const ::ssl_world_packet_vector_3d& velocity_raw() const;
  inline ::ssl_world_packet_vector_3d* mutable_velocity_raw();
  inline ::ssl_world_packet_vector_3d* release_velocity_raw();
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet.Ball)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_displacement();
  inline void clear_has_displacement();
  inline void set_has_velocity_raw();
  inline void clear_has_velocity_raw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ssl_world_packet_vector_3d* position_;
  ::ssl_world_packet_vector_3d* velocity_;
  ::ssl_world_packet_vector_3d* acceleration_;
  ::ssl_world_packet_vector_3d* displacement_;
  ::ssl_world_packet_vector_3d* velocity_raw_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet_Ball* default_instance_;
};
// -------------------------------------------------------------------

class ssl_world_packet_Robot : public ::google::protobuf::Message {
 public:
  ssl_world_packet_Robot();
  virtual ~ssl_world_packet_Robot();
  
  ssl_world_packet_Robot(const ssl_world_packet_Robot& from);
  
  inline ssl_world_packet_Robot& operator=(const ssl_world_packet_Robot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet_Robot& default_instance();
  
  void Swap(ssl_world_packet_Robot* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet_Robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet_Robot& from);
  void MergeFrom(const ssl_world_packet_Robot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .ssl_world_packet.vector_3d position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::ssl_world_packet_vector_3d& position() const;
  inline ::ssl_world_packet_vector_3d* mutable_position();
  inline ::ssl_world_packet_vector_3d* release_position();
  
  // required .ssl_world_packet.vector_3d velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline const ::ssl_world_packet_vector_3d& velocity() const;
  inline ::ssl_world_packet_vector_3d* mutable_velocity();
  inline ::ssl_world_packet_vector_3d* release_velocity();
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet.Robot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ssl_world_packet_vector_3d* position_;
  ::ssl_world_packet_vector_3d* velocity_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet_Robot* default_instance_;
};
// -------------------------------------------------------------------

class ssl_world_packet_Team : public ::google::protobuf::Message {
 public:
  ssl_world_packet_Team();
  virtual ~ssl_world_packet_Team();
  
  ssl_world_packet_Team(const ssl_world_packet_Team& from);
  
  inline ssl_world_packet_Team& operator=(const ssl_world_packet_Team& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet_Team& default_instance();
  
  void Swap(ssl_world_packet_Team* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet_Team& from);
  void MergeFrom(const ssl_world_packet_Team& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ssl_world_packet.Robot robots = 1;
  inline int robots_size() const;
  inline void clear_robots();
  static const int kRobotsFieldNumber = 1;
  inline const ::ssl_world_packet_Robot& robots(int index) const;
  inline ::ssl_world_packet_Robot* mutable_robots(int index);
  inline ::ssl_world_packet_Robot* add_robots();
  inline const ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Robot >&
      robots() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Robot >*
      mutable_robots();
  
  // required .ssl_world_packet.Side side = 2;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 2;
  inline ::ssl_world_packet_Side side() const;
  inline void set_side(::ssl_world_packet_Side value);
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet.Team)
 private:
  inline void set_has_side();
  inline void clear_has_side();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Robot > robots_;
  int side_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet_Team* default_instance_;
};
// -------------------------------------------------------------------

class ssl_world_packet : public ::google::protobuf::Message {
 public:
  ssl_world_packet();
  virtual ~ssl_world_packet();
  
  ssl_world_packet(const ssl_world_packet& from);
  
  inline ssl_world_packet& operator=(const ssl_world_packet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet& default_instance();
  
  void Swap(ssl_world_packet* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet& from);
  void MergeFrom(const ssl_world_packet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ssl_world_packet_vector_3d vector_3d;
  typedef ssl_world_packet_Ball Ball;
  typedef ssl_world_packet_Robot Robot;
  typedef ssl_world_packet_Team Team;
  
  typedef ssl_world_packet_Side Side;
  static const Side left = ssl_world_packet_Side_left;
  static const Side right = ssl_world_packet_Side_right;
  static inline bool Side_IsValid(int value) {
    return ssl_world_packet_Side_IsValid(value);
  }
  static const Side Side_MIN =
    ssl_world_packet_Side_Side_MIN;
  static const Side Side_MAX =
    ssl_world_packet_Side_Side_MAX;
  static const int Side_ARRAYSIZE =
    ssl_world_packet_Side_Side_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Side_descriptor() {
    return ssl_world_packet_Side_descriptor();
  }
  static inline const ::std::string& Side_Name(Side value) {
    return ssl_world_packet_Side_Name(value);
  }
  static inline bool Side_Parse(const ::std::string& name,
      Side* value) {
    return ssl_world_packet_Side_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .ssl_world_packet.Ball field_balls = 1;
  inline int field_balls_size() const;
  inline void clear_field_balls();
  static const int kFieldBallsFieldNumber = 1;
  inline const ::ssl_world_packet_Ball& field_balls(int index) const;
  inline ::ssl_world_packet_Ball* mutable_field_balls(int index);
  inline ::ssl_world_packet_Ball* add_field_balls();
  inline const ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Ball >&
      field_balls() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Ball >*
      mutable_field_balls();
  
  // required .ssl_world_packet.Team blue_team = 2;
  inline bool has_blue_team() const;
  inline void clear_blue_team();
  static const int kBlueTeamFieldNumber = 2;
  inline const ::ssl_world_packet_Team& blue_team() const;
  inline ::ssl_world_packet_Team* mutable_blue_team();
  inline ::ssl_world_packet_Team* release_blue_team();
  
  // required .ssl_world_packet.Team yellow_team = 3;
  inline bool has_yellow_team() const;
  inline void clear_yellow_team();
  static const int kYellowTeamFieldNumber = 3;
  inline const ::ssl_world_packet_Team& yellow_team() const;
  inline ::ssl_world_packet_Team* mutable_yellow_team();
  inline ::ssl_world_packet_Team* release_yellow_team();
  
  // required string referee_state = 4;
  inline bool has_referee_state() const;
  inline void clear_referee_state();
  static const int kRefereeStateFieldNumber = 4;
  inline const ::std::string& referee_state() const;
  inline void set_referee_state(const ::std::string& value);
  inline void set_referee_state(const char* value);
  inline void set_referee_state(const char* value, size_t size);
  inline ::std::string* mutable_referee_state();
  inline ::std::string* release_referee_state();
  
  // optional string comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet)
 private:
  inline void set_has_blue_team();
  inline void clear_has_blue_team();
  inline void set_has_yellow_team();
  inline void clear_has_yellow_team();
  inline void set_has_referee_state();
  inline void clear_has_referee_state();
  inline void set_has_comment();
  inline void clear_has_comment();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Ball > field_balls_;
  ::ssl_world_packet_Team* blue_team_;
  ::ssl_world_packet_Team* yellow_team_;
  ::std::string* referee_state_;
  ::std::string* comment_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet* default_instance_;
};
// ===================================================================


// ===================================================================

// ssl_world_packet_vector_3d

// required float x = 1;
inline bool ssl_world_packet_vector_3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_world_packet_vector_3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_world_packet_vector_3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_world_packet_vector_3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ssl_world_packet_vector_3d::x() const {
  return x_;
}
inline void ssl_world_packet_vector_3d::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool ssl_world_packet_vector_3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet_vector_3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet_vector_3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet_vector_3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ssl_world_packet_vector_3d::y() const {
  return y_;
}
inline void ssl_world_packet_vector_3d::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float teta = 3;
inline bool ssl_world_packet_vector_3d::has_teta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_world_packet_vector_3d::set_has_teta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_world_packet_vector_3d::clear_has_teta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_world_packet_vector_3d::clear_teta() {
  teta_ = 0;
  clear_has_teta();
}
inline float ssl_world_packet_vector_3d::teta() const {
  return teta_;
}
inline void ssl_world_packet_vector_3d::set_teta(float value) {
  set_has_teta();
  teta_ = value;
}

// -------------------------------------------------------------------

// ssl_world_packet_Ball

// required uint32 id = 1;
inline bool ssl_world_packet_Ball::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_world_packet_Ball::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_world_packet_Ball::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_world_packet_Ball::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ssl_world_packet_Ball::id() const {
  return id_;
}
inline void ssl_world_packet_Ball::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .ssl_world_packet.vector_3d position = 2;
inline bool ssl_world_packet_Ball::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet_Ball::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet_Ball::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet_Ball::clear_position() {
  if (position_ != NULL) position_->::ssl_world_packet_vector_3d::Clear();
  clear_has_position();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Ball::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::ssl_world_packet_vector_3d;
  return position_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::release_position() {
  clear_has_position();
  ::ssl_world_packet_vector_3d* temp = position_;
  position_ = NULL;
  return temp;
}

// required .ssl_world_packet.vector_3d velocity = 3;
inline bool ssl_world_packet_Ball::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_world_packet_Ball::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_world_packet_Ball::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_world_packet_Ball::clear_velocity() {
  if (velocity_ != NULL) velocity_->::ssl_world_packet_vector_3d::Clear();
  clear_has_velocity();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Ball::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::ssl_world_packet_vector_3d;
  return velocity_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::release_velocity() {
  clear_has_velocity();
  ::ssl_world_packet_vector_3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}

// required .ssl_world_packet.vector_3d acceleration = 4;
inline bool ssl_world_packet_Ball::has_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ssl_world_packet_Ball::set_has_acceleration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ssl_world_packet_Ball::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ssl_world_packet_Ball::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::ssl_world_packet_vector_3d::Clear();
  clear_has_acceleration();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Ball::acceleration() const {
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::ssl_world_packet_vector_3d;
  return acceleration_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::release_acceleration() {
  clear_has_acceleration();
  ::ssl_world_packet_vector_3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}

// optional .ssl_world_packet.vector_3d displacement = 5;
inline bool ssl_world_packet_Ball::has_displacement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ssl_world_packet_Ball::set_has_displacement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ssl_world_packet_Ball::clear_has_displacement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ssl_world_packet_Ball::clear_displacement() {
  if (displacement_ != NULL) displacement_->::ssl_world_packet_vector_3d::Clear();
  clear_has_displacement();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Ball::displacement() const {
  return displacement_ != NULL ? *displacement_ : *default_instance_->displacement_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::mutable_displacement() {
  set_has_displacement();
  if (displacement_ == NULL) displacement_ = new ::ssl_world_packet_vector_3d;
  return displacement_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::release_displacement() {
  clear_has_displacement();
  ::ssl_world_packet_vector_3d* temp = displacement_;
  displacement_ = NULL;
  return temp;
}

// optional .ssl_world_packet.vector_3d velocity_raw = 6;
inline bool ssl_world_packet_Ball::has_velocity_raw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ssl_world_packet_Ball::set_has_velocity_raw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ssl_world_packet_Ball::clear_has_velocity_raw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ssl_world_packet_Ball::clear_velocity_raw() {
  if (velocity_raw_ != NULL) velocity_raw_->::ssl_world_packet_vector_3d::Clear();
  clear_has_velocity_raw();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Ball::velocity_raw() const {
  return velocity_raw_ != NULL ? *velocity_raw_ : *default_instance_->velocity_raw_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::mutable_velocity_raw() {
  set_has_velocity_raw();
  if (velocity_raw_ == NULL) velocity_raw_ = new ::ssl_world_packet_vector_3d;
  return velocity_raw_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Ball::release_velocity_raw() {
  clear_has_velocity_raw();
  ::ssl_world_packet_vector_3d* temp = velocity_raw_;
  velocity_raw_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ssl_world_packet_Robot

// required uint32 id = 1;
inline bool ssl_world_packet_Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_world_packet_Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_world_packet_Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_world_packet_Robot::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ssl_world_packet_Robot::id() const {
  return id_;
}
inline void ssl_world_packet_Robot::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .ssl_world_packet.vector_3d position = 2;
inline bool ssl_world_packet_Robot::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet_Robot::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet_Robot::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet_Robot::clear_position() {
  if (position_ != NULL) position_->::ssl_world_packet_vector_3d::Clear();
  clear_has_position();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Robot::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Robot::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::ssl_world_packet_vector_3d;
  return position_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Robot::release_position() {
  clear_has_position();
  ::ssl_world_packet_vector_3d* temp = position_;
  position_ = NULL;
  return temp;
}

// required .ssl_world_packet.vector_3d velocity = 3;
inline bool ssl_world_packet_Robot::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_world_packet_Robot::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_world_packet_Robot::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_world_packet_Robot::clear_velocity() {
  if (velocity_ != NULL) velocity_->::ssl_world_packet_vector_3d::Clear();
  clear_has_velocity();
}
inline const ::ssl_world_packet_vector_3d& ssl_world_packet_Robot::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Robot::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::ssl_world_packet_vector_3d;
  return velocity_;
}
inline ::ssl_world_packet_vector_3d* ssl_world_packet_Robot::release_velocity() {
  clear_has_velocity();
  ::ssl_world_packet_vector_3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ssl_world_packet_Team

// repeated .ssl_world_packet.Robot robots = 1;
inline int ssl_world_packet_Team::robots_size() const {
  return robots_.size();
}
inline void ssl_world_packet_Team::clear_robots() {
  robots_.Clear();
}
inline const ::ssl_world_packet_Robot& ssl_world_packet_Team::robots(int index) const {
  return robots_.Get(index);
}
inline ::ssl_world_packet_Robot* ssl_world_packet_Team::mutable_robots(int index) {
  return robots_.Mutable(index);
}
inline ::ssl_world_packet_Robot* ssl_world_packet_Team::add_robots() {
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Robot >&
ssl_world_packet_Team::robots() const {
  return robots_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Robot >*
ssl_world_packet_Team::mutable_robots() {
  return &robots_;
}

// required .ssl_world_packet.Side side = 2;
inline bool ssl_world_packet_Team::has_side() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet_Team::set_has_side() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet_Team::clear_has_side() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet_Team::clear_side() {
  side_ = -1;
  clear_has_side();
}
inline ::ssl_world_packet_Side ssl_world_packet_Team::side() const {
  return static_cast< ::ssl_world_packet_Side >(side_);
}
inline void ssl_world_packet_Team::set_side(::ssl_world_packet_Side value) {
  GOOGLE_DCHECK(::ssl_world_packet_Side_IsValid(value));
  set_has_side();
  side_ = value;
}

// -------------------------------------------------------------------

// ssl_world_packet

// repeated .ssl_world_packet.Ball field_balls = 1;
inline int ssl_world_packet::field_balls_size() const {
  return field_balls_.size();
}
inline void ssl_world_packet::clear_field_balls() {
  field_balls_.Clear();
}
inline const ::ssl_world_packet_Ball& ssl_world_packet::field_balls(int index) const {
  return field_balls_.Get(index);
}
inline ::ssl_world_packet_Ball* ssl_world_packet::mutable_field_balls(int index) {
  return field_balls_.Mutable(index);
}
inline ::ssl_world_packet_Ball* ssl_world_packet::add_field_balls() {
  return field_balls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Ball >&
ssl_world_packet::field_balls() const {
  return field_balls_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_world_packet_Ball >*
ssl_world_packet::mutable_field_balls() {
  return &field_balls_;
}

// required .ssl_world_packet.Team blue_team = 2;
inline bool ssl_world_packet::has_blue_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet::set_has_blue_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet::clear_has_blue_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet::clear_blue_team() {
  if (blue_team_ != NULL) blue_team_->::ssl_world_packet_Team::Clear();
  clear_has_blue_team();
}
inline const ::ssl_world_packet_Team& ssl_world_packet::blue_team() const {
  return blue_team_ != NULL ? *blue_team_ : *default_instance_->blue_team_;
}
inline ::ssl_world_packet_Team* ssl_world_packet::mutable_blue_team() {
  set_has_blue_team();
  if (blue_team_ == NULL) blue_team_ = new ::ssl_world_packet_Team;
  return blue_team_;
}
inline ::ssl_world_packet_Team* ssl_world_packet::release_blue_team() {
  clear_has_blue_team();
  ::ssl_world_packet_Team* temp = blue_team_;
  blue_team_ = NULL;
  return temp;
}

// required .ssl_world_packet.Team yellow_team = 3;
inline bool ssl_world_packet::has_yellow_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_world_packet::set_has_yellow_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_world_packet::clear_has_yellow_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_world_packet::clear_yellow_team() {
  if (yellow_team_ != NULL) yellow_team_->::ssl_world_packet_Team::Clear();
  clear_has_yellow_team();
}
inline const ::ssl_world_packet_Team& ssl_world_packet::yellow_team() const {
  return yellow_team_ != NULL ? *yellow_team_ : *default_instance_->yellow_team_;
}
inline ::ssl_world_packet_Team* ssl_world_packet::mutable_yellow_team() {
  set_has_yellow_team();
  if (yellow_team_ == NULL) yellow_team_ = new ::ssl_world_packet_Team;
  return yellow_team_;
}
inline ::ssl_world_packet_Team* ssl_world_packet::release_yellow_team() {
  clear_has_yellow_team();
  ::ssl_world_packet_Team* temp = yellow_team_;
  yellow_team_ = NULL;
  return temp;
}

// required string referee_state = 4;
inline bool ssl_world_packet::has_referee_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ssl_world_packet::set_has_referee_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ssl_world_packet::clear_has_referee_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ssl_world_packet::clear_referee_state() {
  if (referee_state_ != &::google::protobuf::internal::kEmptyString) {
    referee_state_->clear();
  }
  clear_has_referee_state();
}
inline const ::std::string& ssl_world_packet::referee_state() const {
  return *referee_state_;
}
inline void ssl_world_packet::set_referee_state(const ::std::string& value) {
  set_has_referee_state();
  if (referee_state_ == &::google::protobuf::internal::kEmptyString) {
    referee_state_ = new ::std::string;
  }
  referee_state_->assign(value);
}
inline void ssl_world_packet::set_referee_state(const char* value) {
  set_has_referee_state();
  if (referee_state_ == &::google::protobuf::internal::kEmptyString) {
    referee_state_ = new ::std::string;
  }
  referee_state_->assign(value);
}
inline void ssl_world_packet::set_referee_state(const char* value, size_t size) {
  set_has_referee_state();
  if (referee_state_ == &::google::protobuf::internal::kEmptyString) {
    referee_state_ = new ::std::string;
  }
  referee_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_world_packet::mutable_referee_state() {
  set_has_referee_state();
  if (referee_state_ == &::google::protobuf::internal::kEmptyString) {
    referee_state_ = new ::std::string;
  }
  return referee_state_;
}
inline ::std::string* ssl_world_packet::release_referee_state() {
  clear_has_referee_state();
  if (referee_state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = referee_state_;
    referee_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 5;
inline bool ssl_world_packet::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ssl_world_packet::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ssl_world_packet::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ssl_world_packet::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ssl_world_packet::comment() const {
  return *comment_;
}
inline void ssl_world_packet::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_world_packet::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_world_packet::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_world_packet::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* ssl_world_packet::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_world_packet_Side>() {
  return ::ssl_world_packet_Side_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5fworld_2eproto__INCLUDED
